#include "algorithms/des.h"
#include "misc/log.h"

namespace DESTypes
{
	/// DES initial permutation
	static const uint32 ip[] = {
		57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
		61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7,
		56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, 26, 18, 10, 2,
		60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6
	};

	/// DES final permutation (= ip^-1)
	static const uint32 fp[] = {
		39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30,
		37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28,
		35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26,
		33, 1, 41, 9, 49, 17, 57, 25, 32, 0, 40, 8, 48, 16, 56, 24
	};

	/// DES round expansion permutation table
	static const uint32 xpn[] = {
		31, 0, 1, 2, 3, 4,
		3, 4, 5, 6, 7, 8,
		7, 8, 9, 10, 11, 12,
		11, 12, 13, 14, 15, 16,
		15, 16, 17, 18, 19, 20,
		19, 20, 21, 22, 23, 24,
		23, 24, 25, 26, 27, 28,
		27, 28, 29, 30, 31, 0
	};

	/// DES round permutation table
	static const uint32 perm[] = {
		15, 6, 19, 20,
		28, 11, 27, 16,
		0, 14, 22, 25,
		4, 17, 30, 9,
		1, 7, 23, 13,
		31, 26, 2, 8,
		18, 12, 29, 5,
		21, 10, 3, 24
	};

	/// DES round inverse permutation table
	static const uint32 invPerm[] = {
		8, 16, 22, 30,
		12, 27, 1, 17,
		23, 15, 29, 5,
		25, 19, 9, 0,
		7, 13, 24, 2,
		3, 28, 10, 18,
		31, 11, 21, 6,
		4, 26, 14, 20
	};

	/// DES round substitution tables
	static const uint32 subs[8][64] = {
		{
			14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
			3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
			4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
			15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13
		},
		{
			15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
			9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
			0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
			5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9
		},
		{
			10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
			1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
			13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
			11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12
		},
		{
			7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
			1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
			10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
			15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14
		},
		{
			2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
			8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
			4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
			15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3
		},
		{
			12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
			0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
			9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
			7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13
		},
		{
			4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
			3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
			1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
			10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12
		},
		{
			13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
			10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
			7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
			0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
		}
	};

	/// Differentials associated to DES S-boxes
	static const uint32 diffs[8][16 * 64] = {
		{
			64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 6, 0, 2, 4, 4, 0, 10, 12, 4, 10, 6, 2, 4,
			0, 0, 0, 8, 0, 4, 4, 4, 0, 6, 8, 6, 12, 6, 4, 2,
			14, 4, 2, 2, 10, 6, 4, 2, 6, 4, 4, 0, 2, 2, 2, 0,
			0, 0, 0, 6, 0, 10, 10, 6, 0, 4, 6, 4, 2, 8, 6, 2,
			4, 8, 6, 2, 2, 4, 4, 2, 0, 4, 4, 0, 12, 2, 4, 6,
			0, 4, 2, 4, 8, 2, 6, 2, 8, 4, 4, 2, 4, 2, 0, 12,
			2, 4, 10, 4, 0, 4, 8, 4, 2, 4, 8, 2, 2, 2, 4, 4,
			0, 0, 0, 12, 0, 8, 8, 4, 0, 6, 2, 8, 8, 2, 2, 4,
			10, 2, 4, 0, 2, 4, 6, 0, 2, 2, 8, 0, 10, 0, 2, 12,
			0, 8, 6, 2, 2, 8, 6, 0, 6, 4, 6, 0, 4, 0, 2, 10,
			2, 4, 0, 10, 2, 2, 4, 0, 2, 6, 2, 6, 6, 4, 2, 12,
			0, 0, 0, 8, 0, 6, 6, 0, 0, 6, 6, 4, 6, 6, 14, 2,
			6, 6, 4, 8, 4, 8, 2, 6, 0, 6, 4, 6, 0, 2, 0, 2,
			0, 4, 8, 8, 6, 6, 4, 0, 6, 6, 4, 0, 0, 4, 0, 8,
			2, 0, 2, 4, 4, 6, 4, 2, 4, 8, 2, 2, 2, 6, 8, 8,
			0, 0, 0, 0, 0, 0, 2, 14, 0, 6, 6, 12, 4, 6, 8, 6,
			6, 8, 2, 4, 6, 4, 8, 6, 4, 0, 6, 6, 0, 4, 0, 0,
			0, 8, 4, 2, 6, 6, 4, 6, 6, 4, 2, 6, 6, 0, 4, 0,
			2, 4, 4, 6, 2, 0, 4, 6, 2, 0, 6, 8, 4, 6, 4, 6,
			0, 8, 8, 0, 10, 0, 4, 2, 8, 2, 2, 4, 4, 8, 4, 0,
			0, 4, 6, 4, 2, 2, 4, 10, 6, 2, 0, 10, 0, 4, 6, 4,
			0, 8, 10, 8, 0, 2, 2, 6, 10, 2, 0, 2, 0, 6, 2, 6,
			4, 4, 6, 0, 10, 6, 0, 2, 4, 4, 4, 6, 6, 6, 2, 0,
			0, 6, 6, 0, 8, 4, 2, 2, 2, 4, 6, 8, 6, 6, 2, 2,
			2, 6, 2, 4, 0, 8, 4, 6, 10, 4, 0, 4, 2, 8, 4, 0,
			0, 6, 4, 0, 4, 6, 6, 6, 6, 2, 2, 0, 4, 4, 6, 8,
			4, 4, 2, 4, 10, 6, 6, 4, 6, 2, 2, 4, 2, 2, 4, 2,
			0, 10, 10, 6, 6, 0, 0, 12, 6, 4, 0, 0, 2, 4, 4, 0,
			4, 2, 4, 0, 8, 0, 0, 2, 10, 0, 2, 6, 6, 6, 14, 0,
			0, 2, 6, 0, 14, 2, 0, 0, 6, 4, 10, 8, 2, 2, 6, 2,
			2, 4, 10, 6, 2, 2, 2, 8, 6, 8, 0, 0, 0, 4, 6, 4,
			0, 0, 0, 10, 0, 12, 8, 2, 0, 6, 4, 4, 4, 2, 0, 12,
			0, 4, 2, 4, 4, 8, 10, 0, 4, 4, 10, 0, 4, 0, 2, 8,
			10, 4, 6, 2, 2, 8, 2, 2, 2, 2, 6, 0, 4, 0, 4, 10,
			0, 4, 4, 8, 0, 2, 6, 0, 6, 6, 2, 10, 2, 4, 0, 10,
			12, 0, 0, 2, 2, 2, 2, 0, 14, 14, 2, 0, 2, 6, 2, 4,
			6, 4, 4, 12, 4, 4, 4, 10, 2, 2, 2, 0, 4, 2, 2, 2,
			0, 0, 4, 10, 10, 10, 2, 4, 0, 4, 6, 4, 4, 4, 2, 0,
			10, 4, 2, 0, 2, 4, 2, 0, 4, 8, 0, 4, 8, 8, 4, 4,
			12, 2, 2, 8, 2, 6, 12, 0, 0, 2, 6, 0, 4, 0, 6, 2,
			4, 2, 2, 10, 0, 2, 4, 0, 0, 14, 10, 2, 4, 6, 0, 4,
			4, 2, 4, 6, 0, 2, 8, 2, 2, 14, 2, 6, 2, 6, 2, 2,
			12, 2, 2, 2, 4, 6, 6, 2, 0, 2, 6, 2, 6, 0, 8, 4,
			4, 2, 2, 4, 0, 2, 10, 4, 2, 2, 4, 8, 8, 4, 2, 6,
			6, 2, 6, 2, 8, 4, 4, 4, 2, 4, 6, 0, 8, 2, 0, 6,
			6, 6, 2, 2, 0, 2, 4, 6, 4, 0, 6, 2, 12, 2, 6, 4,
			2, 2, 2, 2, 2, 6, 8, 8, 2, 4, 4, 6, 8, 2, 4, 2,
			0, 4, 6, 0, 12, 6, 2, 2, 8, 2, 4, 4, 6, 2, 2, 4,
			4, 8, 2, 10, 2, 2, 2, 2, 6, 0, 0, 2, 2, 4, 10, 8,
			4, 2, 6, 4, 4, 2, 2, 4, 6, 6, 4, 8, 2, 2, 8, 0,
			4, 4, 6, 2, 10, 8, 4, 2, 4, 0, 2, 2, 4, 6, 2, 4,
			0, 8, 16, 6, 2, 0, 0, 12, 6, 0, 0, 0, 0, 8, 0, 6,
			2, 2, 4, 0, 8, 0, 0, 0, 14, 4, 6, 8, 0, 2, 14, 0,
			2, 6, 2, 2, 8, 0, 2, 2, 4, 2, 6, 8, 6, 4, 10, 0,
			2, 2, 12, 4, 2, 4, 4, 10, 4, 4, 2, 6, 0, 2, 2, 4,
			0, 6, 2, 2, 2, 0, 2, 2, 4, 6, 4, 4, 4, 6, 10, 10,
			6, 2, 2, 4, 12, 6, 4, 8, 4, 0, 2, 4, 2, 4, 4, 0,
			6, 4, 6, 4, 6, 8, 0, 6, 2, 2, 6, 2, 2, 6, 4, 0,
			2, 6, 4, 0, 0, 2, 4, 6, 4, 6, 8, 6, 4, 4, 6, 2,
			0, 10, 4, 0, 12, 0, 4, 2, 6, 0, 4, 12, 4, 4, 2, 0,
			0, 8, 6, 2, 2, 6, 0, 8, 4, 4, 0, 4, 0, 12, 4, 4,
			4, 8, 2, 2, 2, 4, 4, 14, 4, 2, 0, 2, 0, 8, 4, 4,
			4, 8, 4, 2, 4, 0, 2, 4, 4, 2, 4, 8, 8, 6, 2, 2
		},
		{
			64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 4, 0, 2, 6, 4, 0, 14, 8, 6, 8, 4, 6, 2,
			0, 0, 0, 2, 0, 4, 6, 4, 0, 0, 4, 6, 10, 10, 12, 6,
			4, 8, 4, 8, 4, 6, 4, 2, 4, 2, 2, 4, 6, 2, 0, 4,
			0, 0, 0, 0, 0, 6, 0, 14, 0, 6, 10, 4, 10, 6, 4, 4,
			2, 0, 4, 8, 2, 4, 6, 6, 2, 0, 8, 4, 2, 4, 10, 2,
			0, 12, 6, 4, 6, 4, 6, 2, 2, 10, 2, 8, 2, 0, 0, 0,
			4, 6, 6, 4, 2, 4, 4, 2, 6, 4, 2, 4, 4, 6, 0, 6,
			0, 0, 0, 4, 0, 4, 0, 8, 0, 10, 16, 6, 6, 0, 6, 4,
			14, 2, 4, 10, 2, 8, 2, 6, 2, 4, 0, 0, 2, 2, 2, 4,
			0, 6, 6, 2, 10, 4, 10, 2, 6, 2, 2, 4, 2, 2, 4, 2,
			6, 2, 2, 0, 2, 4, 6, 2, 10, 2, 0, 6, 6, 4, 4, 8,
			0, 0, 0, 4, 0, 14, 0, 10, 0, 6, 2, 4, 4, 8, 6, 6,
			6, 2, 6, 2, 10, 2, 0, 4, 0, 10, 4, 2, 8, 2, 2, 4,
			0, 6, 12, 8, 0, 4, 2, 0, 8, 2, 4, 4, 6, 2, 0, 6,
			0, 8, 2, 0, 6, 6, 8, 2, 4, 4, 4, 6, 8, 0, 4, 2,
			0, 0, 0, 8, 0, 4, 10, 2, 0, 2, 8, 10, 0, 10, 6, 4,
			6, 6, 4, 6, 4, 0, 6, 4, 8, 2, 10, 2, 2, 4, 0, 0,
			0, 6, 2, 6, 2, 4, 12, 4, 6, 4, 0, 4, 4, 6, 2, 2,
			4, 0, 4, 0, 8, 6, 6, 0, 0, 2, 0, 6, 4, 8, 2, 14,
			0, 6, 6, 4, 10, 0, 2, 12, 6, 2, 2, 2, 4, 4, 2, 2,
			6, 8, 2, 0, 8, 2, 0, 2, 2, 2, 2, 2, 2, 14, 10, 2,
			0, 8, 6, 4, 2, 2, 4, 2, 6, 4, 6, 2, 6, 0, 6, 6,
			6, 4, 8, 6, 4, 4, 0, 4, 6, 2, 4, 4, 4, 2, 4, 2,
			0, 6, 4, 6, 10, 4, 0, 2, 4, 8, 0, 0, 4, 8, 2, 6,
			2, 4, 6, 4, 4, 2, 4, 2, 6, 4, 6, 8, 0, 6, 4, 2,
			0, 6, 8, 4, 2, 4, 2, 2, 8, 2, 2, 6, 2, 4, 4, 8,
			0, 6, 4, 4, 0, 12, 6, 4, 2, 2, 2, 4, 4, 2, 10, 2,
			0, 4, 6, 6, 12, 0, 4, 0, 10, 2, 6, 2, 0, 0, 10, 2,
			0, 6, 2, 2, 6, 0, 4, 16, 4, 4, 2, 0, 0, 4, 6, 8,
			0, 4, 8, 2, 10, 6, 6, 0, 8, 4, 0, 2, 4, 4, 0, 6,
			4, 2, 6, 6, 2, 2, 2, 4, 8, 6, 10, 6, 4, 0, 0, 2,
			0, 0, 0, 2, 0, 12, 10, 4, 0, 0, 0, 2, 14, 2, 8, 10,
			0, 4, 6, 8, 2, 10, 4, 2, 2, 6, 4, 2, 6, 2, 0, 6,
			4, 12, 8, 4, 2, 2, 0, 0, 2, 8, 8, 6, 0, 6, 0, 2,
			8, 2, 0, 2, 8, 4, 2, 6, 4, 8, 2, 2, 6, 4, 2, 4,
			10, 4, 0, 0, 0, 4, 0, 2, 6, 8, 6, 10, 8, 0, 2, 4,
			6, 0, 12, 2, 8, 6, 10, 0, 0, 8, 2, 6, 0, 0, 2, 2,
			2, 2, 4, 4, 2, 2, 10, 14, 2, 0, 4, 2, 2, 4, 6, 4,
			6, 0, 0, 2, 6, 4, 2, 4, 4, 4, 8, 4, 8, 0, 6, 6,
			8, 0, 8, 2, 4, 12, 2, 0, 2, 6, 2, 0, 6, 2, 0, 10,
			0, 2, 4, 10, 2, 8, 6, 4, 0, 10, 0, 2, 10, 0, 2, 4,
			4, 0, 4, 8, 6, 2, 4, 4, 6, 6, 2, 6, 2, 2, 4, 4,
			2, 2, 6, 4, 0, 2, 2, 6, 2, 8, 8, 4, 4, 4, 8, 2,
			10, 6, 8, 6, 0, 6, 4, 4, 4, 2, 4, 4, 0, 0, 2, 4,
			2, 2, 2, 4, 0, 0, 0, 2, 8, 4, 4, 6, 10, 2, 14, 4,
			2, 4, 0, 2, 10, 4, 2, 0, 2, 2, 6, 2, 8, 8, 10, 2,
			12, 4, 6, 8, 2, 6, 2, 8, 0, 4, 0, 2, 0, 8, 2, 0,
			0, 4, 0, 2, 4, 4, 8, 6, 10, 6, 2, 12, 0, 0, 0, 6,
			0, 10, 2, 0, 6, 2, 10, 2, 6, 0, 2, 0, 6, 6, 4, 8,
			8, 4, 6, 0, 6, 4, 4, 8, 4, 6, 8, 0, 2, 2, 2, 0,
			2, 2, 6, 10, 2, 0, 0, 6, 4, 4, 12, 8, 4, 2, 2, 0,
			0, 12, 6, 4, 6, 0, 4, 4, 4, 0, 4, 6, 4, 2, 4, 4,
			0, 12, 4, 6, 2, 4, 4, 0, 10, 0, 0, 8, 0, 8, 0, 6,
			8, 2, 4, 0, 4, 0, 4, 2, 0, 8, 4, 2, 6, 16, 2, 2,
			6, 2, 2, 2, 6, 6, 4, 8, 2, 2, 6, 2, 2, 2, 4, 8,
			0, 8, 8, 10, 6, 2, 2, 0, 4, 0, 4, 2, 4, 0, 4, 10,
			0, 2, 0, 0, 8, 0, 10, 4, 10, 0, 8, 4, 4, 4, 4, 6,
			4, 0, 2, 8, 4, 2, 2, 2, 4, 8, 2, 0, 4, 10, 10, 2,
			16, 4, 4, 2, 8, 2, 2, 6, 4, 4, 4, 2, 0, 2, 2, 2,
			0, 2, 6, 2, 8, 4, 6, 0, 10, 2, 2, 4, 4, 10, 4, 0,
			0, 16, 10, 2, 4, 2, 4, 2, 8, 0, 0, 8, 0, 6, 2, 0,
			4, 4, 0, 10, 2, 4, 2, 14, 4, 2, 6, 6, 0, 0, 6, 0,
			4, 0, 0, 2, 0, 8, 2, 4, 0, 2, 4, 4, 4, 14, 10, 6
		},
		{
			64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 2, 0, 4, 2, 12, 0, 14, 0, 4, 8, 2, 6, 10,
			0, 0, 0, 2, 0, 2, 0, 8, 0, 4, 12, 10, 4, 6, 8, 8,
			8, 6, 10, 4, 8, 6, 0, 6, 4, 4, 0, 0, 0, 4, 2, 2,
			0, 0, 0, 4, 0, 2, 4, 2, 0, 12, 8, 4, 6, 8, 10, 4,
			6, 2, 4, 8, 6, 10, 6, 2, 2, 8, 2, 0, 2, 0, 4, 2,
			0, 10, 6, 6, 10, 0, 4, 12, 2, 4, 0, 0, 6, 4, 0, 0,
			2, 0, 0, 4, 4, 4, 4, 2, 10, 4, 4, 8, 4, 4, 4, 6,
			0, 0, 0, 10, 0, 4, 4, 6, 0, 6, 6, 6, 6, 0, 8, 8,
			10, 2, 0, 2, 10, 4, 6, 2, 0, 6, 0, 4, 6, 2, 4, 6,
			0, 10, 6, 0, 14, 6, 4, 0, 4, 6, 6, 0, 4, 0, 2, 2,
			2, 6, 2, 10, 2, 2, 4, 0, 4, 2, 6, 0, 2, 8, 14, 0,
			0, 0, 0, 8, 0, 12, 12, 4, 0, 8, 0, 4, 2, 10, 2, 2,
			8, 2, 8, 0, 0, 4, 2, 0, 2, 8, 14, 2, 6, 2, 4, 2,
			0, 4, 4, 2, 4, 2, 4, 4, 10, 4, 4, 4, 4, 4, 2, 8,
			4, 6, 4, 6, 2, 2, 4, 8, 6, 2, 6, 2, 0, 6, 2, 4,
			0, 0, 0, 4, 0, 12, 4, 8, 0, 4, 2, 6, 2, 14, 0, 8,
			8, 2, 2, 6, 4, 0, 2, 0, 8, 4, 12, 2, 10, 0, 2, 2,
			0, 2, 8, 2, 4, 8, 0, 8, 8, 0, 2, 2, 4, 2, 14, 0,
			4, 4, 12, 0, 2, 2, 2, 10, 2, 2, 2, 2, 4, 4, 4, 8,
			0, 6, 4, 4, 6, 4, 6, 2, 8, 6, 6, 2, 2, 0, 0, 8,
			4, 8, 2, 8, 2, 4, 8, 0, 4, 2, 2, 2, 2, 6, 8, 2,
			0, 6, 10, 2, 8, 4, 2, 0, 2, 2, 2, 8, 4, 6, 4, 4,
			0, 6, 6, 0, 6, 2, 4, 4, 6, 2, 2, 10, 6, 8, 2, 0,
			0, 8, 4, 6, 6, 0, 6, 2, 4, 0, 4, 2, 10, 0, 6, 6,
			4, 2, 4, 8, 4, 2, 10, 2, 2, 2, 6, 8, 2, 6, 0, 2,
			0, 8, 6, 4, 4, 0, 6, 4, 4, 8, 0, 10, 2, 2, 2, 4,
			4, 10, 2, 0, 2, 4, 2, 4, 8, 2, 2, 8, 4, 2, 8, 2,
			0, 6, 8, 8, 4, 2, 8, 0, 12, 0, 10, 0, 4, 0, 2, 0,
			0, 2, 0, 6, 2, 8, 4, 6, 2, 0, 4, 2, 4, 10, 0, 14,
			0, 4, 8, 2, 4, 6, 0, 4, 10, 0, 2, 6, 4, 8, 4, 2,
			0, 6, 8, 0, 10, 6, 4, 6, 4, 2, 2, 10, 4, 0, 0, 2,
			0, 0, 0, 0, 0, 4, 4, 8, 0, 2, 2, 4, 10, 16, 12, 2,
			10, 8, 8, 0, 8, 4, 2, 4, 0, 6, 6, 6, 0, 0, 2, 0,
			12, 6, 4, 4, 2, 4, 10, 2, 0, 4, 4, 2, 4, 4, 0, 2,
			2, 2, 0, 6, 0, 2, 4, 0, 4, 12, 4, 2, 6, 4, 8, 8,
			4, 8, 2, 12, 6, 4, 2, 10, 2, 2, 2, 4, 2, 0, 4, 0,
			6, 0, 2, 0, 8, 2, 0, 2, 8, 8, 2, 2, 4, 4, 10, 6,
			6, 2, 0, 4, 4, 0, 4, 0, 4, 2, 14, 0, 8, 10, 0, 6,
			0, 2, 4, 16, 8, 6, 6, 6, 0, 2, 4, 4, 0, 2, 2, 2,
			6, 2, 10, 0, 6, 4, 0, 4, 4, 2, 4, 8, 2, 2, 8, 2,
			0, 2, 8, 4, 0, 4, 0, 6, 4, 10, 4, 8, 4, 4, 4, 2,
			2, 6, 0, 4, 2, 4, 4, 6, 4, 8, 4, 4, 4, 2, 4, 6,
			10, 2, 6, 6, 4, 4, 8, 0, 4, 2, 2, 0, 2, 4, 4, 6,
			10, 4, 6, 2, 4, 2, 2, 2, 4, 10, 4, 4, 0, 2, 6, 2,
			4, 2, 4, 4, 4, 2, 4, 16, 2, 0, 0, 4, 4, 2, 6, 6,
			4, 0, 2, 10, 0, 6, 10, 4, 2, 6, 6, 2, 2, 0, 2, 8,
			8, 2, 0, 0, 4, 4, 4, 2, 6, 4, 6, 2, 4, 8, 4, 6,
			0, 10, 8, 6, 2, 0, 4, 2, 10, 4, 4, 6, 2, 0, 6, 0,
			2, 6, 2, 0, 4, 2, 8, 8, 2, 2, 2, 0, 2, 12, 6, 6,
			2, 0, 4, 8, 2, 8, 4, 4, 8, 4, 2, 8, 6, 2, 0, 2,
			4, 4, 6, 8, 6, 6, 0, 2, 2, 2, 6, 4, 12, 0, 0, 2,
			0, 6, 2, 2, 16, 2, 2, 2, 12, 2, 4, 0, 4, 2, 0, 8,
			4, 6, 0, 10, 8, 0, 2, 2, 6, 0, 0, 6, 2, 10, 2, 6,
			4, 4, 4, 4, 0, 6, 6, 4, 4, 4, 4, 4, 0, 6, 2, 8,
			4, 8, 2, 4, 2, 2, 6, 0, 2, 4, 8, 4, 10, 0, 6, 2,
			0, 8, 12, 0, 2, 2, 6, 6, 2, 10, 2, 2, 0, 8, 0, 4,
			2, 6, 4, 0, 6, 4, 6, 4, 8, 0, 4, 4, 2, 4, 8, 2,
			6, 0, 2, 2, 4, 6, 4, 4, 4, 2, 2, 6, 12, 2, 6, 2,
			2, 2, 6, 0, 0, 10, 4, 8, 4, 2, 4, 8, 4, 4, 0, 6,
			0, 2, 4, 2, 12, 2, 0, 6, 2, 0, 2, 8, 4, 6, 4, 10,
			4, 6, 8, 6, 2, 2, 2, 2, 10, 2, 6, 6, 2, 4, 2, 0,
			8, 6, 4, 4, 2, 10, 2, 0, 2, 2, 4, 2, 4, 2, 10, 2,
			2, 6, 4, 0, 0, 10, 8, 2, 2, 8, 6, 4, 6, 2, 0, 4
		},
		{
			64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 16, 16, 0, 0, 16, 16, 0, 0, 0, 0, 0,
			0, 0, 0, 8, 0, 4, 4, 8, 0, 4, 4, 8, 8, 8, 8, 0,
			8, 6, 2, 0, 2, 4, 8, 2, 6, 0, 4, 6, 0, 6, 2, 8,
			0, 0, 0, 8, 0, 0, 12, 4, 0, 12, 0, 4, 8, 4, 4, 8,
			4, 2, 2, 8, 2, 12, 0, 2, 2, 0, 12, 2, 8, 2, 2, 4,
			0, 8, 8, 4, 8, 8, 0, 0, 8, 0, 8, 0, 4, 0, 0, 8,
			4, 2, 6, 4, 6, 0, 16, 6, 2, 0, 0, 2, 4, 2, 6, 4,
			0, 0, 0, 4, 0, 8, 4, 8, 0, 4, 8, 8, 4, 8, 8, 0,
			8, 4, 4, 4, 4, 0, 8, 4, 4, 0, 0, 4, 4, 4, 4, 8,
			0, 6, 6, 0, 6, 4, 4, 6, 6, 4, 4, 6, 0, 6, 6, 0,
			0, 12, 0, 8, 0, 0, 0, 0, 12, 0, 0, 12, 8, 12, 0, 0,
			0, 0, 0, 4, 0, 8, 4, 8, 0, 4, 8, 8, 4, 8, 8, 0,
			8, 4, 4, 4, 4, 0, 0, 4, 4, 8, 0, 4, 4, 4, 4, 8,
			0, 6, 6, 4, 6, 0, 4, 6, 6, 4, 0, 6, 4, 6, 6, 0,
			0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
			0, 0, 0, 0, 0, 8, 12, 4, 0, 12, 8, 4, 0, 4, 4, 8,
			4, 2, 2, 16, 2, 4, 0, 2, 2, 0, 4, 2, 16, 2, 2, 4,
			0, 0, 0, 8, 0, 4, 4, 8, 0, 4, 4, 8, 8, 8, 8, 0,
			8, 2, 6, 0, 6, 4, 0, 6, 2, 8, 4, 2, 0, 2, 6, 8,
			0, 8, 8, 0, 8, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 16,
			8, 4, 4, 0, 4, 8, 0, 4, 4, 0, 8, 4, 0, 4, 4, 8,
			0, 8, 8, 4, 8, 8, 0, 0, 8, 0, 8, 0, 4, 0, 0, 8,
			4, 6, 2, 4, 2, 0, 0, 2, 6, 16, 0, 6, 4, 6, 2, 4,
			0, 8, 8, 8, 8, 4, 0, 0, 8, 0, 4, 0, 8, 0, 0, 8,
			4, 4, 4, 0, 4, 4, 16, 4, 4, 0, 4, 4, 0, 4, 4, 4,
			0, 6, 6, 4, 6, 0, 4, 6, 6, 4, 0, 6, 4, 6, 6, 0,
			0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
			0, 8, 8, 8, 8, 4, 0, 0, 8, 0, 4, 0, 8, 0, 0, 8,
			4, 4, 4, 0, 4, 4, 0, 4, 4, 16, 4, 4, 0, 4, 4, 4,
			0, 6, 6, 0, 6, 4, 4, 6, 6, 4, 4, 6, 0, 6, 6, 0,
			0, 0, 12, 8, 12, 0, 0, 12, 0, 0, 0, 0, 8, 0, 12, 0,
			0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 8, 12, 12, 0,
			0, 4, 8, 0, 8, 4, 8, 8, 4, 0, 4, 4, 0, 4, 8, 0,
			8, 2, 2, 0, 2, 4, 8, 6, 2, 8, 4, 6, 0, 6, 6, 0,
			4, 6, 2, 8, 2, 4, 0, 2, 6, 0, 4, 6, 8, 6, 2, 4,
			0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
			0, 8, 4, 4, 4, 0, 0, 4, 8, 8, 0, 8, 4, 8, 4, 0,
			0, 6, 6, 0, 6, 4, 8, 2, 6, 8, 4, 2, 0, 2, 2, 8,
			4, 6, 2, 8, 2, 4, 0, 2, 6, 0, 4, 6, 8, 6, 2, 4,
			16, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0,
			0, 6, 2, 8, 2, 4, 0, 2, 6, 8, 4, 6, 8, 6, 2, 0,
			0, 2, 2, 16, 2, 4, 4, 2, 2, 4, 4, 2, 16, 2, 2, 0,
			8, 0, 4, 0, 4, 8, 16, 4, 0, 0, 8, 0, 0, 0, 4, 8,
			8, 4, 4, 4, 4, 0, 8, 4, 4, 8, 0, 4, 4, 4, 4, 0,
			4, 2, 6, 4, 6, 8, 0, 6, 2, 0, 8, 2, 4, 2, 6, 4,
			16, 0, 0, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 0, 0, 16,
			16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 16,
			0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
			0, 8, 4, 4, 4, 0, 0, 4, 8, 8, 0, 8, 4, 8, 4, 0,
			16, 6, 6, 4, 6, 0, 4, 2, 6, 4, 0, 2, 4, 2, 2, 0,
			0, 2, 6, 4, 6, 8, 8, 6, 2, 0, 8, 2, 4, 2, 6, 0,
			0, 12, 12, 8, 12, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0,
			0, 4, 8, 0, 8, 4, 8, 8, 4, 0, 4, 4, 0, 4, 8, 0,
			0, 2, 2, 4, 2, 0, 4, 6, 2, 4, 0, 6, 4, 6, 6, 16,
			0, 2, 6, 4, 6, 8, 8, 6, 2, 0, 8, 2, 4, 2, 6, 0,
			0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 16,
			0, 6, 2, 8, 2, 4, 0, 2, 6, 8, 4, 6, 8, 6, 2, 0,
			0, 4, 4, 0, 4, 8, 8, 4, 4, 8, 8, 4, 0, 4, 4, 0,
			16, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 16,
			0, 4, 4, 4, 4, 0, 8, 4, 4, 8, 0, 4, 4, 4, 4, 8,
			4, 2, 6, 4, 6, 8, 0, 6, 2, 0, 8, 2, 4, 2, 6, 4,
			0, 2, 2, 8, 2, 12, 4, 2, 2, 4, 12, 2, 8, 2, 2, 0,
			8, 4, 0, 8, 0, 0, 0, 0, 4, 16, 0, 4, 8, 4, 0, 8
		},
		{
			64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 4, 0, 10, 8, 6, 0, 4, 2, 2, 12, 10, 2, 4,
			0, 0, 0, 4, 0, 10, 6, 4, 0, 6, 4, 2, 4, 8, 10, 6,
			8, 2, 4, 6, 4, 4, 2, 2, 6, 8, 6, 4, 4, 0, 2, 2,
			0, 0, 0, 8, 0, 4, 10, 6, 0, 6, 6, 4, 8, 6, 0, 6,
			12, 2, 0, 4, 0, 4, 8, 2, 4, 0, 16, 2, 0, 2, 0, 8,
			0, 8, 4, 6, 4, 6, 2, 2, 4, 4, 6, 0, 6, 0, 2, 10,
			2, 0, 4, 8, 4, 2, 6, 6, 2, 8, 6, 2, 2, 0, 6, 6,
			0, 0, 0, 2, 0, 8, 10, 4, 0, 4, 10, 4, 8, 4, 4, 6,
			8, 6, 0, 4, 0, 6, 6, 2, 2, 10, 2, 8, 6, 2, 0, 2,
			0, 6, 8, 6, 0, 8, 0, 0, 8, 10, 4, 2, 8, 0, 0, 4,
			4, 2, 2, 4, 8, 10, 6, 4, 2, 6, 2, 2, 6, 2, 2, 2,
			0, 0, 0, 10, 0, 2, 10, 2, 0, 6, 10, 6, 6, 6, 2, 4,
			10, 4, 2, 2, 0, 6, 16, 0, 0, 2, 10, 2, 2, 4, 0, 4,
			0, 6, 4, 8, 4, 6, 10, 2, 4, 4, 4, 2, 4, 0, 2, 4,
			4, 4, 0, 8, 0, 2, 0, 2, 8, 2, 4, 2, 8, 4, 4, 12,
			0, 0, 0, 0, 0, 4, 4, 12, 0, 2, 8, 10, 4, 6, 12, 2,
			6, 6, 10, 10, 4, 0, 2, 6, 2, 4, 0, 6, 2, 4, 2, 0,
			0, 2, 4, 2, 10, 4, 0, 10, 8, 6, 0, 6, 0, 6, 6, 0,
			0, 0, 6, 2, 8, 0, 0, 4, 4, 6, 2, 8, 2, 8, 10, 4,
			0, 12, 2, 6, 4, 0, 4, 4, 8, 4, 4, 4, 6, 2, 4, 0,
			4, 8, 0, 2, 8, 0, 2, 4, 2, 2, 4, 2, 4, 8, 8, 6,
			0, 6, 10, 2, 14, 0, 2, 2, 4, 4, 0, 6, 0, 4, 6, 4,
			0, 6, 8, 4, 8, 4, 0, 2, 8, 4, 0, 2, 2, 8, 6, 2,
			0, 10, 8, 0, 6, 4, 0, 4, 4, 4, 6, 4, 4, 4, 0, 6,
			0, 4, 6, 2, 4, 4, 2, 6, 4, 2, 2, 4, 12, 2, 10, 0,
			0, 2, 16, 2, 12, 2, 0, 6, 4, 0, 0, 4, 0, 4, 4, 8,
			2, 8, 12, 0, 0, 2, 2, 6, 8, 4, 0, 6, 0, 0, 8, 6,
			0, 10, 2, 6, 6, 6, 6, 4, 8, 2, 0, 4, 4, 4, 2, 0,
			4, 6, 2, 0, 8, 2, 4, 6, 6, 0, 8, 6, 2, 4, 2, 4,
			0, 2, 6, 2, 4, 0, 0, 2, 12, 2, 2, 6, 2, 10, 10, 4,
			0, 6, 8, 4, 8, 8, 0, 6, 6, 2, 0, 6, 0, 6, 2, 2,
			0, 0, 0, 8, 0, 8, 2, 6, 0, 4, 4, 4, 6, 6, 8, 8,
			0, 0, 0, 6, 6, 2, 6, 4, 6, 10, 14, 4, 0, 0, 4, 2,
			14, 4, 0, 10, 0, 2, 12, 2, 2, 2, 10, 2, 0, 0, 2, 2,
			2, 0, 0, 4, 2, 2, 10, 4, 0, 8, 8, 2, 6, 8, 0, 8,
			6, 2, 8, 4, 4, 4, 6, 2, 2, 6, 6, 2, 6, 2, 2, 2,
			6, 0, 0, 8, 2, 8, 2, 6, 6, 4, 2, 2, 4, 2, 6, 6,
			12, 0, 0, 4, 0, 4, 4, 4, 0, 8, 4, 0, 12, 8, 0, 4,
			12, 2, 0, 2, 0, 12, 2, 2, 4, 4, 8, 4, 8, 2, 2, 0,
			2, 8, 4, 6, 2, 4, 6, 0, 6, 6, 4, 0, 2, 2, 2, 10,
			6, 4, 6, 8, 8, 4, 6, 2, 0, 0, 2, 2, 10, 0, 2, 4,
			4, 4, 0, 2, 2, 4, 6, 2, 0, 0, 6, 4, 10, 4, 4, 12,
			4, 6, 2, 6, 0, 0, 12, 2, 0, 4, 12, 2, 6, 4, 0, 4,
			8, 6, 2, 6, 4, 8, 6, 0, 4, 4, 0, 2, 6, 0, 6, 2,
			4, 4, 0, 4, 0, 6, 4, 2, 4, 12, 0, 4, 4, 6, 4, 6,
			6, 0, 2, 4, 0, 6, 6, 4, 2, 10, 6, 10, 6, 2, 0, 0,
			10, 4, 0, 2, 2, 6, 10, 2, 0, 2, 2, 4, 6, 2, 2, 10,
			0, 4, 8, 4, 6, 4, 0, 6, 10, 4, 2, 4, 2, 6, 4, 0,
			0, 6, 6, 4, 10, 2, 0, 0, 4, 4, 0, 0, 4, 6, 12, 6,
			4, 6, 0, 2, 6, 4, 6, 0, 6, 0, 4, 6, 4, 10, 6, 0,
			8, 10, 0, 14, 8, 0, 0, 8, 2, 0, 2, 4, 0, 4, 4, 0,
			0, 4, 4, 2, 14, 4, 0, 8, 6, 8, 2, 2, 0, 4, 6, 0,
			0, 4, 16, 0, 8, 4, 0, 4, 4, 4, 0, 8, 0, 4, 4, 4,
			4, 4, 4, 6, 2, 2, 2, 12, 2, 4, 4, 8, 2, 4, 4, 0,
			4, 2, 2, 2, 4, 2, 0, 8, 2, 2, 2, 12, 6, 2, 8, 6,
			0, 4, 8, 4, 12, 0, 0, 8, 10, 2, 0, 0, 0, 4, 2, 10,
			0, 8, 12, 0, 2, 2, 2, 2, 12, 4, 0, 8, 0, 4, 4, 4,
			0, 14, 4, 0, 4, 6, 0, 0, 6, 2, 10, 8, 0, 0, 4, 6,
			0, 2, 2, 2, 4, 4, 8, 6, 8, 2, 2, 2, 6, 14, 2, 0,
			0, 0, 10, 2, 6, 0, 0, 2, 6, 2, 2, 10, 2, 4, 10, 8,
			0, 6, 12, 2, 4, 8, 0, 8, 8, 2, 2, 0, 2, 2, 4, 4,
			4, 4, 10, 0, 2, 4, 8, 8, 2, 2, 0, 2, 6, 8, 4, 0,
			8, 6, 6, 0, 4, 2, 2, 4, 4, 2, 8, 6, 2, 4, 6, 0,
		},
		{
			64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 6, 0, 2, 6, 2, 0, 4, 2, 4, 6, 16, 14, 2,
			0, 0, 0, 2, 0, 10, 6, 10, 0, 2, 4, 8, 6, 6, 8, 2,
			0, 8, 0, 8, 0, 6, 4, 6, 4, 4, 4, 12, 2, 4, 2, 0,
			0, 0, 0, 8, 0, 0, 8, 0, 0, 6, 8, 10, 2, 4, 10, 8,
			10, 2, 4, 4, 4, 8, 8, 4, 2, 2, 0, 4, 0, 8, 0, 4,
			0, 8, 4, 4, 8, 4, 2, 2, 12, 0, 2, 6, 6, 2, 2, 2,
			6, 6, 4, 0, 2, 10, 2, 2, 2, 2, 6, 6, 8, 0, 6, 2,
			0, 0, 0, 6, 0, 2, 16, 4, 0, 2, 6, 2, 4, 12, 6, 4,
			10, 4, 2, 6, 0, 2, 6, 2, 4, 0, 8, 6, 4, 4, 2, 4,
			0, 14, 4, 4, 0, 2, 2, 2, 10, 4, 4, 4, 6, 4, 2, 2,
			4, 6, 2, 0, 2, 2, 12, 8, 2, 2, 2, 6, 8, 2, 0, 6,
			0, 0, 0, 12, 0, 10, 4, 6, 0, 8, 4, 4, 2, 12, 2, 0,
			12, 0, 2, 10, 6, 4, 4, 2, 4, 2, 6, 0, 2, 6, 0, 4,
			0, 6, 4, 0, 4, 4, 10, 8, 6, 2, 4, 6, 2, 0, 6, 2,
			2, 2, 2, 2, 6, 2, 6, 2, 10, 4, 8, 2, 6, 4, 4, 2,
			0, 0, 0, 8, 0, 8, 0, 12, 0, 4, 2, 6, 8, 4, 6, 6,
			6, 2, 6, 4, 6, 2, 6, 4, 6, 6, 4, 2, 4, 0, 6, 0,
			0, 8, 4, 2, 0, 4, 2, 0, 4, 10, 6, 2, 8, 6, 4, 4,
			6, 6, 12, 0, 12, 2, 0, 6, 6, 2, 0, 4, 0, 2, 4, 2,
			0, 4, 6, 2, 8, 6, 0, 2, 6, 10, 4, 0, 2, 4, 6, 4,
			2, 2, 6, 6, 4, 4, 2, 6, 2, 6, 8, 4, 4, 0, 4, 4,
			0, 4, 14, 6, 8, 4, 2, 6, 2, 0, 2, 0, 4, 2, 0, 10,
			2, 6, 8, 0, 0, 2, 0, 2, 2, 6, 0, 8, 8, 2, 12, 6,
			0, 4, 6, 6, 8, 4, 2, 2, 6, 4, 6, 4, 2, 4, 2, 4,
			2, 6, 0, 2, 4, 4, 4, 6, 4, 8, 6, 4, 2, 2, 6, 4,
			0, 6, 6, 0, 8, 2, 4, 6, 4, 2, 4, 6, 2, 0, 4, 10,
			0, 4, 10, 2, 4, 4, 2, 6, 6, 6, 2, 2, 6, 6, 2, 2,
			0, 0, 8, 2, 12, 2, 6, 2, 8, 6, 6, 2, 4, 0, 4, 2,
			2, 4, 0, 6, 8, 6, 0, 2, 6, 8, 6, 0, 2, 4, 0, 10,
			0, 10, 8, 2, 8, 2, 0, 2, 6, 4, 2, 4, 6, 4, 2, 4,
			0, 6, 6, 8, 6, 4, 2, 4, 4, 2, 2, 0, 2, 4, 2, 12,
			0, 0, 0, 0, 0, 6, 6, 4, 0, 4, 8, 8, 4, 6, 10, 8,
			2, 8, 6, 8, 4, 4, 6, 6, 8, 4, 0, 4, 0, 2, 2, 0,
			16, 2, 4, 6, 2, 4, 2, 0, 6, 4, 8, 2, 0, 2, 2, 4,
			0, 4, 0, 4, 4, 6, 10, 4, 2, 2, 6, 2, 4, 6, 6, 4,
			10, 8, 0, 6, 12, 6, 10, 4, 8, 0, 0, 0, 0, 0, 0, 0,
			0, 2, 4, 2, 0, 4, 4, 0, 4, 0, 10, 10, 4, 10, 6, 4,
			2, 2, 0, 12, 2, 2, 6, 2, 4, 4, 8, 0, 6, 6, 8, 0,
			8, 4, 0, 8, 2, 4, 2, 4, 0, 6, 2, 4, 4, 8, 2, 6,
			6, 8, 4, 6, 0, 4, 2, 2, 4, 8, 2, 6, 4, 2, 2, 4,
			2, 4, 4, 0, 8, 8, 6, 8, 6, 4, 0, 4, 4, 4, 2, 0,
			6, 0, 0, 6, 6, 4, 6, 8, 2, 4, 0, 2, 2, 4, 6, 8,
			12, 0, 4, 0, 0, 4, 2, 2, 2, 6, 10, 6, 10, 2, 4, 0,
			4, 2, 6, 0, 0, 6, 8, 6, 4, 2, 2, 8, 4, 6, 4, 2,
			6, 2, 2, 6, 6, 4, 4, 2, 6, 2, 4, 8, 4, 2, 4, 2,
			4, 6, 2, 4, 2, 4, 4, 2, 4, 2, 4, 6, 4, 10, 4, 2,
			10, 0, 4, 8, 0, 6, 6, 2, 0, 4, 4, 2, 6, 2, 2, 8,
			0, 12, 8, 2, 0, 6, 0, 0, 6, 6, 0, 2, 8, 2, 6, 6,
			2, 6, 10, 4, 2, 2, 2, 4, 6, 0, 2, 6, 0, 2, 4, 12,
			4, 2, 2, 8, 10, 8, 8, 6, 0, 2, 2, 4, 4, 2, 2, 0,
			4, 2, 2, 2, 6, 0, 4, 0, 10, 6, 6, 4, 0, 4, 8, 6,
			0, 4, 4, 2, 6, 4, 0, 4, 6, 2, 6, 4, 2, 8, 0, 12,
			6, 12, 4, 2, 4, 2, 2, 4, 8, 2, 2, 0, 6, 4, 4, 2,
			0, 2, 2, 4, 4, 4, 4, 0, 2, 10, 12, 4, 0, 10, 4, 2,
			10, 2, 2, 6, 14, 2, 2, 6, 2, 0, 4, 6, 2, 0, 4, 2,
			0, 4, 14, 0, 8, 2, 0, 4, 4, 4, 2, 0, 8, 2, 4, 8,
			2, 4, 8, 0, 6, 2, 0, 6, 2, 6, 4, 2, 8, 6, 2, 6,
			8, 4, 0, 4, 6, 2, 0, 4, 6, 8, 6, 0, 6, 0, 4, 6,
			0, 4, 6, 6, 2, 2, 2, 14, 0, 12, 0, 4, 2, 2, 8, 0,
			0, 6, 16, 0, 2, 2, 2, 8, 4, 2, 0, 12, 6, 2, 2, 0,
			0, 6, 2, 2, 2, 6, 8, 2, 4, 2, 6, 2, 6, 2, 4, 10,
			4, 2, 2, 4, 4, 0, 6, 10, 4, 2, 4, 6, 6, 2, 6, 2,
			0, 4, 6, 6, 4, 8, 4, 0, 4, 8, 4, 0, 4, 8, 2, 2
		},
		{
			64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 2, 0, 4, 4, 14, 0, 12, 4, 6, 2, 6, 6, 4,
			0, 0, 0, 0, 0, 12, 2, 2, 0, 4, 0, 4, 8, 12, 6, 14,
			8, 2, 12, 2, 6, 8, 6, 0, 6, 4, 4, 2, 2, 0, 0, 2,
			0, 0, 0, 8, 0, 4, 4, 8, 0, 8, 8, 12, 2, 6, 2, 2,
			6, 0, 0, 2, 8, 0, 8, 4, 0, 2, 6, 0, 10, 6, 6, 6,
			0, 2, 12, 0, 8, 4, 8, 2, 4, 4, 4, 2, 6, 0, 6, 2,
			4, 6, 4, 12, 0, 4, 2, 0, 0, 14, 2, 6, 4, 0, 0, 6,
			0, 0, 0, 8, 0, 0, 6, 10, 0, 4, 12, 4, 6, 6, 0, 8,
			10, 8, 4, 8, 6, 2, 2, 0, 2, 6, 8, 2, 0, 6, 0, 0,
			0, 10, 6, 2, 12, 2, 4, 0, 4, 4, 6, 4, 4, 0, 0, 6,
			0, 2, 2, 2, 4, 8, 6, 4, 4, 0, 4, 2, 6, 4, 2, 14,
			0, 0, 0, 4, 0, 4, 8, 4, 0, 2, 6, 0, 14, 12, 8, 2,
			6, 6, 2, 4, 2, 6, 4, 6, 6, 4, 8, 8, 0, 2, 0, 0,
			0, 12, 10, 10, 0, 2, 4, 2, 8, 6, 4, 2, 0, 0, 2, 2,
			2, 0, 0, 0, 6, 8, 8, 0, 6, 2, 4, 6, 8, 0, 6, 8,
			0, 0, 0, 4, 0, 2, 8, 6, 0, 6, 4, 10, 8, 4, 8, 4,
			6, 10, 10, 4, 4, 2, 0, 4, 4, 0, 2, 8, 4, 2, 2, 2,
			0, 0, 8, 8, 2, 8, 2, 8, 6, 4, 2, 8, 0, 0, 8, 0,
			4, 4, 2, 2, 8, 6, 0, 2, 2, 2, 0, 4, 6, 8, 14, 0,
			0, 8, 6, 2, 8, 8, 2, 6, 4, 2, 0, 2, 8, 6, 0, 2,
			4, 4, 8, 2, 4, 0, 4, 10, 8, 2, 4, 4, 4, 2, 0, 4,
			0, 6, 10, 2, 2, 2, 2, 4, 10, 8, 2, 2, 0, 4, 10, 0,
			8, 2, 4, 2, 6, 4, 0, 6, 4, 4, 2, 2, 0, 4, 8, 8,
			0, 16, 2, 2, 6, 0, 6, 0, 6, 2, 8, 0, 6, 0, 2, 8,
			0, 8, 0, 2, 4, 4, 10, 4, 8, 0, 6, 4, 2, 6, 2, 4,
			0, 2, 4, 8, 12, 4, 0, 6, 4, 4, 0, 2, 0, 6, 4, 8,
			0, 6, 2, 6, 4, 2, 4, 4, 6, 4, 8, 4, 2, 0, 10, 2,
			0, 8, 4, 4, 2, 6, 6, 6, 6, 4, 6, 8, 0, 2, 0, 2,
			4, 4, 4, 0, 0, 2, 4, 2, 4, 2, 2, 4, 10, 10, 8, 4,
			0, 0, 2, 2, 12, 6, 2, 0, 12, 2, 2, 4, 2, 6, 8, 4,
			2, 2, 10, 14, 2, 4, 2, 4, 4, 6, 0, 2, 4, 8, 0, 0,
			0, 0, 0, 14, 0, 8, 4, 2, 0, 4, 2, 8, 2, 6, 0, 14,
			4, 2, 6, 2, 12, 2, 4, 0, 6, 4, 10, 2, 4, 2, 2, 2,
			10, 6, 0, 2, 4, 4, 10, 0, 4, 0, 12, 2, 8, 0, 0, 2,
			0, 6, 2, 2, 2, 4, 6, 10, 0, 4, 8, 2, 2, 6, 0, 10,
			4, 2, 0, 6, 8, 2, 6, 0, 8, 2, 2, 0, 8, 2, 12, 2,
			2, 0, 2, 16, 2, 4, 6, 4, 6, 8, 2, 4, 0, 6, 0, 2,
			6, 10, 0, 10, 0, 6, 4, 4, 2, 2, 4, 6, 2, 4, 2, 2,
			4, 0, 2, 0, 2, 2, 14, 0, 4, 6, 6, 2, 12, 2, 4, 4,
			14, 4, 6, 4, 4, 6, 2, 0, 6, 6, 2, 2, 4, 0, 2, 2,
			2, 2, 0, 2, 0, 8, 4, 2, 4, 6, 4, 4, 6, 4, 12, 4,
			2, 4, 0, 0, 0, 2, 8, 12, 0, 8, 2, 4, 8, 4, 4, 6,
			16, 6, 2, 4, 6, 10, 2, 2, 2, 2, 2, 2, 4, 2, 2, 0,
			2, 6, 6, 8, 2, 2, 0, 6, 0, 8, 4, 2, 2, 6, 8, 2,
			6, 2, 4, 2, 8, 8, 2, 8, 2, 4, 4, 0, 2, 0, 8, 4,
			2, 4, 8, 0, 2, 2, 2, 4, 0, 2, 8, 4, 14, 6, 0, 6,
			2, 2, 2, 8, 0, 2, 2, 6, 4, 6, 8, 8, 6, 2, 0, 6,
			0, 6, 8, 2, 8, 4, 4, 0, 10, 4, 4, 6, 0, 0, 2, 6,
			0, 8, 4, 0, 6, 2, 2, 6, 6, 0, 0, 2, 6, 4, 8, 10,
			2, 4, 0, 0, 6, 4, 10, 6, 6, 4, 6, 2, 4, 6, 2, 2,
			0, 16, 6, 8, 2, 0, 2, 2, 4, 2, 8, 4, 0, 4, 6, 0,
			0, 4, 14, 8, 2, 2, 2, 4, 16, 2, 2, 2, 0, 2, 0, 4,
			0, 6, 0, 0, 10, 8, 2, 2, 6, 0, 0, 8, 6, 4, 4, 8,
			2, 0, 2, 2, 4, 6, 4, 4, 2, 2, 4, 2, 4, 16, 10, 0,
			6, 6, 6, 8, 4, 2, 4, 4, 4, 0, 6, 8, 2, 4, 0, 0,
			0, 2, 2, 2, 8, 8, 0, 2, 2, 2, 0, 6, 6, 4, 10, 10,
			4, 4, 16, 8, 0, 6, 4, 2, 4, 4, 2, 6, 0, 2, 2, 0,
			16, 6, 4, 0, 2, 0, 2, 6, 0, 4, 8, 10, 0, 0, 4, 2,
			2, 0, 0, 2, 0, 4, 4, 4, 2, 6, 2, 6, 6, 12, 12, 2,
			0, 0, 8, 0, 12, 8, 2, 6, 6, 4, 0, 2, 2, 4, 6, 4,
			2, 4, 12, 2, 2, 2, 0, 4, 6, 10, 2, 6, 4, 2, 0, 6,
			4, 6, 6, 6, 2, 0, 4, 8, 2, 10, 4, 6, 0, 4, 2, 0,
			14, 0, 0, 0, 8, 0, 6, 8, 4, 2, 0, 0, 4, 8, 4, 6
		},
		{
			64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 6, 0, 16, 10, 0, 0, 0, 6, 0, 14, 6, 2, 4,
			0, 0, 0, 8, 0, 10, 4, 2, 0, 10, 2, 4, 8, 8, 6, 2,
			6, 0, 2, 8, 2, 6, 4, 0, 6, 6, 6, 2, 2, 0, 8, 6,
			0, 0, 0, 2, 0, 4, 6, 12, 0, 6, 8, 4, 10, 4, 8, 0,
			4, 10, 6, 0, 0, 2, 6, 0, 4, 10, 4, 6, 8, 2, 0, 2,
			0, 0, 10, 4, 6, 4, 4, 8, 2, 6, 4, 2, 4, 2, 2, 6,
			6, 2, 8, 2, 8, 10, 6, 6, 4, 2, 0, 4, 0, 0, 0, 6,
			0, 0, 0, 4, 0, 6, 4, 2, 0, 8, 6, 10, 8, 2, 2, 12,
			8, 4, 0, 6, 0, 4, 4, 6, 2, 4, 6, 2, 12, 2, 0, 4,
			0, 0, 16, 4, 6, 6, 4, 0, 4, 6, 4, 2, 2, 0, 0, 10,
			2, 8, 0, 6, 2, 6, 0, 4, 4, 10, 0, 2, 10, 2, 6, 2,
			0, 0, 0, 2, 0, 10, 10, 6, 0, 6, 6, 6, 2, 6, 10, 0,
			6, 0, 4, 10, 2, 0, 8, 6, 2, 2, 6, 10, 2, 2, 2, 2,
			0, 0, 6, 8, 4, 8, 0, 2, 10, 6, 2, 4, 6, 2, 4, 2,
			8, 0, 4, 2, 2, 4, 2, 2, 2, 6, 4, 6, 0, 2, 14, 6,
			0, 0, 0, 4, 0, 0, 8, 12, 0, 0, 8, 8, 2, 10, 6, 6,
			0, 6, 4, 6, 2, 2, 6, 6, 4, 6, 4, 6, 0, 4, 4, 4,
			0, 4, 0, 8, 6, 2, 8, 4, 2, 4, 4, 6, 2, 4, 10, 0,
			4, 2, 2, 6, 8, 6, 2, 2, 14, 2, 2, 4, 2, 2, 2, 4,
			0, 16, 4, 2, 6, 0, 2, 6, 4, 0, 4, 6, 4, 6, 4, 0,
			0, 10, 6, 0, 6, 0, 2, 8, 2, 2, 0, 8, 2, 6, 6, 6,
			0, 12, 6, 4, 6, 0, 0, 0, 8, 6, 6, 2, 2, 6, 4, 2,
			0, 6, 8, 0, 6, 2, 4, 6, 6, 0, 2, 6, 4, 4, 2, 8,
			0, 12, 2, 2, 8, 0, 8, 0, 10, 4, 4, 2, 4, 2, 0, 6,
			6, 4, 8, 0, 8, 0, 4, 2, 0, 0, 12, 2, 4, 6, 2, 6,
			0, 4, 6, 2, 8, 8, 0, 4, 8, 0, 0, 0, 6, 2, 0, 16,
			2, 4, 8, 10, 2, 4, 2, 8, 2, 4, 8, 2, 0, 2, 4, 2,
			0, 12, 6, 4, 6, 4, 2, 2, 6, 0, 4, 4, 2, 10, 2, 0,
			8, 6, 0, 0, 10, 0, 0, 8, 10, 4, 2, 2, 2, 8, 4, 0,
			0, 4, 8, 6, 8, 2, 4, 4, 10, 2, 2, 4, 2, 0, 6, 2,
			4, 2, 4, 2, 6, 2, 4, 0, 2, 6, 2, 2, 2, 16, 8, 2,
			0, 0, 0, 16, 0, 4, 0, 0, 0, 14, 6, 4, 2, 0, 4, 14,
			0, 0, 2, 10, 2, 8, 10, 0, 0, 6, 6, 0, 10, 2, 2, 6,
			8, 0, 6, 0, 6, 4, 10, 2, 0, 6, 8, 0, 4, 4, 2, 4,
			4, 8, 0, 6, 0, 4, 8, 6, 2, 2, 10, 4, 8, 0, 0, 2,
			4, 0, 4, 8, 4, 6, 2, 4, 8, 6, 2, 0, 0, 4, 4, 8,
			0, 4, 6, 8, 2, 8, 8, 0, 4, 2, 4, 4, 2, 2, 6, 4,
			2, 6, 0, 6, 4, 4, 4, 6, 6, 0, 4, 4, 10, 4, 2, 2,
			6, 6, 0, 0, 2, 2, 6, 2, 4, 4, 6, 10, 2, 6, 2, 6,
			10, 2, 6, 2, 4, 12, 12, 0, 2, 2, 4, 0, 0, 0, 2, 6,
			4, 0, 0, 14, 2, 10, 4, 2, 8, 6, 4, 0, 4, 2, 2, 2,
			8, 8, 0, 2, 0, 2, 4, 0, 2, 6, 8, 14, 2, 8, 0, 0,
			2, 2, 0, 0, 4, 2, 10, 4, 6, 2, 4, 0, 6, 4, 8, 10,
			2, 6, 6, 2, 4, 6, 2, 0, 2, 6, 4, 0, 6, 4, 10, 4,
			8, 0, 4, 4, 6, 2, 0, 0, 6, 8, 2, 4, 6, 4, 4, 6,
			6, 2, 2, 4, 2, 2, 6, 12, 4, 0, 4, 2, 8, 8, 0, 2,
			8, 12, 4, 6, 6, 4, 2, 2, 2, 2, 4, 2, 2, 4, 0, 4,
			0, 4, 6, 2, 10, 2, 2, 2, 4, 8, 0, 0, 8, 4, 6, 6,
			4, 6, 8, 0, 4, 6, 0, 4, 4, 6, 10, 2, 2, 4, 4, 0,
			6, 6, 6, 2, 4, 6, 0, 2, 0, 6, 8, 2, 2, 6, 6, 2,
			6, 6, 4, 2, 4, 0, 0, 10, 2, 2, 0, 6, 8, 4, 0, 10,
			0, 2, 12, 4, 10, 4, 0, 4, 12, 0, 2, 4, 2, 2, 2, 4,
			6, 4, 4, 0, 10, 0, 0, 4, 10, 0, 0, 4, 2, 8, 8, 4,
			4, 6, 2, 2, 2, 2, 6, 8, 6, 4, 2, 6, 0, 4, 10, 0,
			2, 2, 8, 2, 4, 4, 4, 2, 6, 2, 0, 10, 6, 10, 2, 0,
			0, 4, 8, 4, 2, 6, 6, 2, 4, 2, 2, 4, 6, 4, 4, 6,
			4, 4, 4, 8, 0, 6, 0, 6, 4, 8, 2, 2, 2, 4, 8, 2,
			8, 8, 0, 4, 2, 0, 10, 4, 0, 0, 0, 4, 8, 6, 8, 2,
			8, 2, 6, 4, 4, 4, 4, 0, 6, 4, 4, 6, 4, 4, 4, 0,
			0, 6, 6, 6, 6, 0, 0, 8, 8, 2, 4, 8, 4, 2, 4, 0,
			2, 2, 8, 0, 10, 0, 2, 12, 0, 4, 0, 8, 0, 2, 6, 8,
			6, 4, 0, 0, 4, 4, 0, 10, 6, 2, 6, 12, 2, 4, 0, 4,
			0, 6, 6, 0, 4, 4, 6, 10, 0, 6, 8, 2, 0, 4, 8, 0
		}
	};
}

const DES DES::std = {
	numRounds : 16,
	ip : DESTypes::ip,
	fp : DESTypes::fp,
	xpn : DESTypes::xpn,
	perm : DESTypes::perm,
	subs : {
		DESTypes::subs[0],
		DESTypes::subs[1],
		DESTypes::subs[2],
		DESTypes::subs[3],
		DESTypes::subs[4],
		DESTypes::subs[5],
		DESTypes::subs[6],
		DESTypes::subs[7]
	},
	difs : {
		DESTypes::diffs[0],
		DESTypes::diffs[1],
		DESTypes::diffs[2],
		DESTypes::diffs[3],
		DESTypes::diffs[4],
		DESTypes::diffs[5],
		DESTypes::diffs[6],
		DESTypes::diffs[7]
	}
};

void DES::keySchedule(BitArray * keys, const BitArray & key) const
{
	BitArray c(28), d(28);
	const uint32 shifts[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
	const uint32 kperm[] = {13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9, 22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1, 40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31};

	key.permute(c, (const uint32[]){56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35});
	key.permute(d, (const uint32[]){62, 54, 46, 38, 30, 22, 14, 6, 61, 55, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 27, 19, 11, 3});

	for (uint32 roundIdx = 0; roundIdx < numRounds; ++roundIdx)
	{
		keys[roundIdx] = BitArray(48);

		c.rotateLeft(shifts[roundIdx]);
		d.rotateLeft(shifts[roundIdx]);

		c.merge(d).permute(keys[roundIdx], kperm);
	}
}

BitArray DES::encryptBlock(const BitArray & ptx, const BitArray * roundKeys) const
{
	BitArray ctx(64);
	BitArray l(32), r(32);
	BitArray e(48);
	BitArray u(32), v(32);

	// Apply initial permutation
	ptx.permute(l, ip);
	ptx.permute(r, ip + 32);

	// 0 -> (N - 1) rounds
	uint32 roundIdx = 0; for (; roundIdx < numRounds - 1; ++roundIdx)
	{
		(r.permute(e, xpn) ^= roundKeys[roundIdx]).substitute<6, 4>(u, subs, 8).permute(v, perm) ^= l;
		l = r, r = v;
	}

	// Last round
	(r.permute(e, xpn) ^= roundKeys[roundIdx]).substitute<6, 4>(u, subs, 8).permute(v, perm) ^= l;
	return v.append(r).permute(ctx, fp);
}

BitArray DES::decryptBlock(const BitArray & ctx, const BitArray * roundKeys) const
{
	BitArray ptx(64);
	BitArray l(32), r(32);
	BitArray e(48);
	BitArray u(32), v(32);

	// Apply initial permutation
	ctx.permute(l, ip);
	ctx.permute(r, ip + 32);

	// 0 -> (N - 1) rounds
	uint32 roundIdx = numRounds - 1; for (; roundIdx > 0; --roundIdx)
	{
		(r.permute(e, xpn) ^= roundKeys[roundIdx]).substitute<6, 4>(u, subs, 8).permute(v, perm) ^= l;
		l = r, r = v;
	}

	// Last round
	(r.permute(e, xpn) ^= roundKeys[0]).substitute<6, 4>(u, subs, 8).permute(v, perm) ^= l;
	return v.append(r).permute(ptx, fp);
}

void Path::init(const BitArray & ptx)
{
	// Create first round from ptx
	RoundInstance & inputRound = rounds.push(RoundInstance{
		dr : BitArray(32),
		dl : BitArray(32)
	});

	ptx.permute(inputRound.dl, params->ip);
	ptx.permute(inputRound.dr, params->ip + 32);

	// Init cost
	g = 0.;
	computeH();
}

void Path::computeH()
{
	// Out probability
	float64 h0 = 0.;

	// Round differential inputs
	auto & lastRound = *rounds.last();
	BitArray dx(48), dr = lastRound.dr, dl = lastRound.dl;
	lastRound.dr.permute(dx, params->xpn);

	const uint32 numLeftRounds = params->numRounds - rounds.getCount() - 1;
	const uint32 lookAhead = 1;

	uint32 r = 0; for (; r < Math::min(lookAhead, numLeftRounds); ++r)
	{
		BitArray dy(0), du(32);

		// For each sbox
		for (uint32 s = 0; s < 8; ++s)
		{
			const uint32 * row = params->difs[s] + (dx(s * 6, (s + 1) * 6) << 4);

			// Find max probability
			ubyte y = 0;
			uint32 max = row[0];
			for (uint32 j = 1; j < 16 && max < 64; ++j)
				if (row[j] > max)
					max = row[j], y = j << 4;
				
			// Append to dy
			dy.append(BitArray(&y, 4));

			// Update best probability
			h0 -= log2(max / 64.);
		}

		// Compute next round differentials
		du = dl;
		dl = dr;
		dy.permute(dr, params->perm) ^= du;
		dr.permute(dx, params->xpn);
	}

	for (; r < numLeftRounds; ++r)
		h0 += 2;

	h = h0;
}

void Path::expand_internal(List<Path> & out, const BitArray & dx, const BitArray & dy, float64 p0, uint32 s) const
{
	if (s < 8)
	{
		uint32 x = dx(s * 6, (s + 1) * 6);
		if (x != 0)
			// For each possible output
			for (ubyte y = 0; y < 16; ++y)
			{
				const uint32 d = params->difs[s][(x << 4) + y];

				if (d > 0)
				{
					const float64 p = d / 64.f;
					const ubyte _y = y << 4;
					expand_internal(out, dx, dy.merge(BitArray(&_y, 4)), p0 * p, s + 1);
				}
			}
		else
			expand_internal(out, dx, dy.merge(BitArray((const ubyte[]){0x0}, 4)), p0, s + 1);
	}
	else
	{
		// Copy path
		Path path(*this);

		// Update current round
		path.rounds.last()->dy = dy;

		// Compute next round
		BitArray u(32);
		path.rounds.push(RoundInstance{
			dr : dy.permute(u, params->perm) ^= path.rounds.last()->dl,
			dl : path.rounds.last()->dr
		});

		// Update path probability
		path.g += -log2(p0);
		path.computeH();

		// Move into output list
		out.push(move(path));
	}
}

void Path::dfSearch_internal(Path & optimalPath, float64 & cost, const BitArray & dx, const BitArray & dy, float64 c0, uint32 s) const
{
	if (s < 8)
	{
		uint32 x = dx(s * 6, (s + 1) * 6);
		if (x != 0)
			// For each possible output
			for (ubyte y = 0; y < 16; ++y)
			{
				const uint32 d = params->difs[s][(x << 4) + y];

				if (d > 0)
				{
					const ubyte _y = y << 4;
					dfSearch_internal(optimalPath, cost, dx, dy.merge(BitArray(&_y, 4)), c0 - log2(d / 64.), s + 1);
				}
			}
		else
			dfSearch_internal(optimalPath, cost, dx, dy.merge(BitArray((const ubyte[]){0x0}, 4)), c0, s + 1);
	}
	else
	{
		Path path(*this);

		// Update current round
		auto & lastRound = *path.rounds.last();
		lastRound.dy = dy;

		// Compute next round
		BitArray u(32);
		path.rounds.push(RoundInstance{
			dr : dy.permute(u, params->perm) ^= lastRound.dl,
			dl : lastRound.dr
		});

		// Update path probability
		path.g += c0;
		path.computeH();
		
		if (path.isComplete())
		{
			if (path.g < cost)
			{
				LOG(INFO, "optimal path cost: %f", path.g);

				cost = path.g;
				optimalPath = path;
			}
		}
		else if (path.getTotalCost() < cost)
			path.dfSearch(optimalPath, cost);
	}
}

float64 Path::sample_internal(BitArray & dy, const BitArray & dx, float64 p0, uint32 s) const
{
	if (s < 8)
	{
		uint32 x = dx(s * 6, (s + 1) * 6);
		if (x != 0)
		{
			uint32 y = 0, d = 0;
			while (d == 0) // ! Assuming there's no null row
			{
				y = rand() & 0xf;
				d = params->difs[s][(x << 4) + y];
			}

			uint32 _y = y << 4;
			return sample_internal(dy.append(BitArray(&_y, 4)), dx, p0 - log2(d / 64.), s + 1);
		}
		else
			return sample_internal(dy.append(BitArray((const ubyte[]){0x0}, 4)), dx, p0, s + 1);
	}

	return p0;
}

float64 Path::sample() const
{
	// Sbox input
	BitArray dx(48), dr = rounds.last()->dr, dl = rounds.last()->dl;
	dr.permute(dx, params->xpn);

	// Number of rounds to simulate
	const uint32 numLeftRounds = params->numRounds - rounds.getCount() - 1;

	float64 g0 = 0.;
	for (uint32 r = 0; r < numLeftRounds; ++r)
	{
		// Sample sboxes output
		BitArray dy(0);
		g0 += sample_internal(dy, dx);

		// Compute next round
		BitArray t = dl;
		dl = dr;
		dy.permute(dr, params->perm) ^= t;
		dr.permute(dx, params->xpn);
	}

	return g + g0;
}