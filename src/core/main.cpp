#include <math.h>
#include <vector>
#include <array>

#define numRounds 6

typedef unsigned char byte;

std::vector<int> IP{
	57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
	61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7,
	56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, 26, 18, 10, 2,
	60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6}; // 64
std::vector<int> IPinv{
	39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30,
	37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28,
	35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26,
	33, 1, 41, 9, 49, 17, 57, 25, 32, 0, 40, 8, 48, 16, 56, 24};  // 64
std::vector<int> Permut{
	15, 6, 19, 20, 28, 11, 27, 16, 0, 14, 22, 25, 4, 17, 30, 9, 1, 7, 23, 13, 31, 26, 2, 8, 18, 12, 29, 5, 21, 10, 3, 24};  // 32
std::vector<int> PermutInv{
	8, 16, 22, 30, 12, 27, 1, 17, 23, 15, 29, 5, 25, 19, 9, 0, 7, 13, 24, 2, 3, 28, 10, 18, 31, 11, 21, 6, 4, 26, 14, 20}; // 32
const byte sboxes[8][64] = {
	{
		14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
		3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
		4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
		15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13
	},
	{
		15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
		9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
		0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
		5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9
	},
	{
		10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
		1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
		13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
		11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12
	},
	{
		7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
		1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
		10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
		15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14
	},
	{
		2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
		8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
		4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
		15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3
	},
	{
		12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
		0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
		9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
		7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13
	},
	{
		4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
		3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
		1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
		10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12
	},
	{
		13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
		10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
		7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
		0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
	}};
const int diffs[8][64*16] = {
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6, 0, 2, 4, 4, 0, 10, 12, 4, 10, 6, 2, 4,
		0, 0, 0, 8, 0, 4, 4, 4, 0, 6, 8, 6, 12, 6, 4, 2,
		14, 4, 2, 2, 10, 6, 4, 2, 6, 4, 4, 0, 2, 2, 2, 0,
		0, 0, 0, 6, 0, 10, 10, 6, 0, 4, 6, 4, 2, 8, 6, 2,
		4, 8, 6, 2, 2, 4, 4, 2, 0, 4, 4, 0, 12, 2, 4, 6,
		0, 4, 2, 4, 8, 2, 6, 2, 8, 4, 4, 2, 4, 2, 0, 12,
		2, 4, 10, 4, 0, 4, 8, 4, 2, 4, 8, 2, 2, 2, 4, 4,
		0, 0, 0, 12, 0, 8, 8, 4, 0, 6, 2, 8, 8, 2, 2, 4,
		10, 2, 4, 0, 2, 4, 6, 0, 2, 2, 8, 0, 10, 0, 2, 12,
		0, 8, 6, 2, 2, 8, 6, 0, 6, 4, 6, 0, 4, 0, 2, 10,
		2, 4, 0, 10, 2, 2, 4, 0, 2, 6, 2, 6, 6, 4, 2, 12,
		0, 0, 0, 8, 0, 6, 6, 0, 0, 6, 6, 4, 6, 6, 14, 2,
		6, 6, 4, 8, 4, 8, 2, 6, 0, 6, 4, 6, 0, 2, 0, 2,
		0, 4, 8, 8, 6, 6, 4, 0, 6, 6, 4, 0, 0, 4, 0, 8,
		2, 0, 2, 4, 4, 6, 4, 2, 4, 8, 2, 2, 2, 6, 8, 8,
		0, 0, 0, 0, 0, 0, 2, 14, 0, 6, 6, 12, 4, 6, 8, 6,
		6, 8, 2, 4, 6, 4, 8, 6, 4, 0, 6, 6, 0, 4, 0, 0,
		0, 8, 4, 2, 6, 6, 4, 6, 6, 4, 2, 6, 6, 0, 4, 0,
		2, 4, 4, 6, 2, 0, 4, 6, 2, 0, 6, 8, 4, 6, 4, 6,
		0, 8, 8, 0, 10, 0, 4, 2, 8, 2, 2, 4, 4, 8, 4, 0,
		0, 4, 6, 4, 2, 2, 4, 10, 6, 2, 0, 10, 0, 4, 6, 4,
		0, 8, 10, 8, 0, 2, 2, 6, 10, 2, 0, 2, 0, 6, 2, 6,
		4, 4, 6, 0, 10, 6, 0, 2, 4, 4, 4, 6, 6, 6, 2, 0,
		0, 6, 6, 0, 8, 4, 2, 2, 2, 4, 6, 8, 6, 6, 2, 2,
		2, 6, 2, 4, 0, 8, 4, 6, 10, 4, 0, 4, 2, 8, 4, 0,
		0, 6, 4, 0, 4, 6, 6, 6, 6, 2, 2, 0, 4, 4, 6, 8,
		4, 4, 2, 4, 10, 6, 6, 4, 6, 2, 2, 4, 2, 2, 4, 2,
		0, 10, 10, 6, 6, 0, 0, 12, 6, 4, 0, 0, 2, 4, 4, 0,
		4, 2, 4, 0, 8, 0, 0, 2, 10, 0, 2, 6, 6, 6, 14, 0,
		0, 2, 6, 0, 14, 2, 0, 0, 6, 4, 10, 8, 2, 2, 6, 2,
		2, 4, 10, 6, 2, 2, 2, 8, 6, 8, 0, 0, 0, 4, 6, 4,
		0, 0, 0, 10, 0, 12, 8, 2, 0, 6, 4, 4, 4, 2, 0, 12,
		0, 4, 2, 4, 4, 8, 10, 0, 4, 4, 10, 0, 4, 0, 2, 8,
		10, 4, 6, 2, 2, 8, 2, 2, 2, 2, 6, 0, 4, 0, 4, 10,
		0, 4, 4, 8, 0, 2, 6, 0, 6, 6, 2, 10, 2, 4, 0, 10,
		12, 0, 0, 2, 2, 2, 2, 0, 14, 14, 2, 0, 2, 6, 2, 4,
		6, 4, 4, 12, 4, 4, 4, 10, 2, 2, 2, 0, 4, 2, 2, 2,
		0, 0, 4, 10, 10, 10, 2, 4, 0, 4, 6, 4, 4, 4, 2, 0,
		10, 4, 2, 0, 2, 4, 2, 0, 4, 8, 0, 4, 8, 8, 4, 4,
		12, 2, 2, 8, 2, 6, 12, 0, 0, 2, 6, 0, 4, 0, 6, 2,
		4, 2, 2, 10, 0, 2, 4, 0, 0, 14, 10, 2, 4, 6, 0, 4,
		4, 2, 4, 6, 0, 2, 8, 2, 2, 14, 2, 6, 2, 6, 2, 2,
		12, 2, 2, 2, 4, 6, 6, 2, 0, 2, 6, 2, 6, 0, 8, 4,
		4, 2, 2, 4, 0, 2, 10, 4, 2, 2, 4, 8, 8, 4, 2, 6,
		6, 2, 6, 2, 8, 4, 4, 4, 2, 4, 6, 0, 8, 2, 0, 6,
		6, 6, 2, 2, 0, 2, 4, 6, 4, 0, 6, 2, 12, 2, 6, 4,
		2, 2, 2, 2, 2, 6, 8, 8, 2, 4, 4, 6, 8, 2, 4, 2,
		0, 4, 6, 0, 12, 6, 2, 2, 8, 2, 4, 4, 6, 2, 2, 4,
		4, 8, 2, 10, 2, 2, 2, 2, 6, 0, 0, 2, 2, 4, 10, 8,
		4, 2, 6, 4, 4, 2, 2, 4, 6, 6, 4, 8, 2, 2, 8, 0,
		4, 4, 6, 2, 10, 8, 4, 2, 4, 0, 2, 2, 4, 6, 2, 4,
		0, 8, 16, 6, 2, 0, 0, 12, 6, 0, 0, 0, 0, 8, 0, 6,
		2, 2, 4, 0, 8, 0, 0, 0, 14, 4, 6, 8, 0, 2, 14, 0,
		2, 6, 2, 2, 8, 0, 2, 2, 4, 2, 6, 8, 6, 4, 10, 0,
		2, 2, 12, 4, 2, 4, 4, 10, 4, 4, 2, 6, 0, 2, 2, 4,
		0, 6, 2, 2, 2, 0, 2, 2, 4, 6, 4, 4, 4, 6, 10, 10,
		6, 2, 2, 4, 12, 6, 4, 8, 4, 0, 2, 4, 2, 4, 4, 0,
		6, 4, 6, 4, 6, 8, 0, 6, 2, 2, 6, 2, 2, 6, 4, 0,
		2, 6, 4, 0, 0, 2, 4, 6, 4, 6, 8, 6, 4, 4, 6, 2,
		0, 10, 4, 0, 12, 0, 4, 2, 6, 0, 4, 12, 4, 4, 2, 0,
		0, 8, 6, 2, 2, 6, 0, 8, 4, 4, 0, 4, 0, 12, 4, 4,
		4, 8, 2, 2, 2, 4, 4, 14, 4, 2, 0, 2, 0, 8, 4, 4,
		4, 8, 4, 2, 4, 0, 2, 4, 4, 2, 4, 8, 8, 6, 2, 2
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 4, 0, 2, 6, 4, 0, 14, 8, 6, 8, 4, 6, 2,
		0, 0, 0, 2, 0, 4, 6, 4, 0, 0, 4, 6, 10, 10, 12, 6,
		4, 8, 4, 8, 4, 6, 4, 2, 4, 2, 2, 4, 6, 2, 0, 4,
		0, 0, 0, 0, 0, 6, 0, 14, 0, 6, 10, 4, 10, 6, 4, 4,
		2, 0, 4, 8, 2, 4, 6, 6, 2, 0, 8, 4, 2, 4, 10, 2,
		0, 12, 6, 4, 6, 4, 6, 2, 2, 10, 2, 8, 2, 0, 0, 0,
		4, 6, 6, 4, 2, 4, 4, 2, 6, 4, 2, 4, 4, 6, 0, 6,
		0, 0, 0, 4, 0, 4, 0, 8, 0, 10, 16, 6, 6, 0, 6, 4,
		14, 2, 4, 10, 2, 8, 2, 6, 2, 4, 0, 0, 2, 2, 2, 4,
		0, 6, 6, 2, 10, 4, 10, 2, 6, 2, 2, 4, 2, 2, 4, 2,
		6, 2, 2, 0, 2, 4, 6, 2, 10, 2, 0, 6, 6, 4, 4, 8,
		0, 0, 0, 4, 0, 14, 0, 10, 0, 6, 2, 4, 4, 8, 6, 6,
		6, 2, 6, 2, 10, 2, 0, 4, 0, 10, 4, 2, 8, 2, 2, 4,
		0, 6, 12, 8, 0, 4, 2, 0, 8, 2, 4, 4, 6, 2, 0, 6,
		0, 8, 2, 0, 6, 6, 8, 2, 4, 4, 4, 6, 8, 0, 4, 2,
		0, 0, 0, 8, 0, 4, 10, 2, 0, 2, 8, 10, 0, 10, 6, 4,
		6, 6, 4, 6, 4, 0, 6, 4, 8, 2, 10, 2, 2, 4, 0, 0,
		0, 6, 2, 6, 2, 4, 12, 4, 6, 4, 0, 4, 4, 6, 2, 2,
		4, 0, 4, 0, 8, 6, 6, 0, 0, 2, 0, 6, 4, 8, 2, 14,
		0, 6, 6, 4, 10, 0, 2, 12, 6, 2, 2, 2, 4, 4, 2, 2,
		6, 8, 2, 0, 8, 2, 0, 2, 2, 2, 2, 2, 2, 14, 10, 2,
		0, 8, 6, 4, 2, 2, 4, 2, 6, 4, 6, 2, 6, 0, 6, 6,
		6, 4, 8, 6, 4, 4, 0, 4, 6, 2, 4, 4, 4, 2, 4, 2,
		0, 6, 4, 6, 10, 4, 0, 2, 4, 8, 0, 0, 4, 8, 2, 6,
		2, 4, 6, 4, 4, 2, 4, 2, 6, 4, 6, 8, 0, 6, 4, 2,
		0, 6, 8, 4, 2, 4, 2, 2, 8, 2, 2, 6, 2, 4, 4, 8,
		0, 6, 4, 4, 0, 12, 6, 4, 2, 2, 2, 4, 4, 2, 10, 2,
		0, 4, 6, 6, 12, 0, 4, 0, 10, 2, 6, 2, 0, 0, 10, 2,
		0, 6, 2, 2, 6, 0, 4, 16, 4, 4, 2, 0, 0, 4, 6, 8,
		0, 4, 8, 2, 10, 6, 6, 0, 8, 4, 0, 2, 4, 4, 0, 6,
		4, 2, 6, 6, 2, 2, 2, 4, 8, 6, 10, 6, 4, 0, 0, 2,
		0, 0, 0, 2, 0, 12, 10, 4, 0, 0, 0, 2, 14, 2, 8, 10,
		0, 4, 6, 8, 2, 10, 4, 2, 2, 6, 4, 2, 6, 2, 0, 6,
		4, 12, 8, 4, 2, 2, 0, 0, 2, 8, 8, 6, 0, 6, 0, 2,
		8, 2, 0, 2, 8, 4, 2, 6, 4, 8, 2, 2, 6, 4, 2, 4,
		10, 4, 0, 0, 0, 4, 0, 2, 6, 8, 6, 10, 8, 0, 2, 4,
		6, 0, 12, 2, 8, 6, 10, 0, 0, 8, 2, 6, 0, 0, 2, 2,
		2, 2, 4, 4, 2, 2, 10, 14, 2, 0, 4, 2, 2, 4, 6, 4,
		6, 0, 0, 2, 6, 4, 2, 4, 4, 4, 8, 4, 8, 0, 6, 6,
		8, 0, 8, 2, 4, 12, 2, 0, 2, 6, 2, 0, 6, 2, 0, 10,
		0, 2, 4, 10, 2, 8, 6, 4, 0, 10, 0, 2, 10, 0, 2, 4,
		4, 0, 4, 8, 6, 2, 4, 4, 6, 6, 2, 6, 2, 2, 4, 4,
		2, 2, 6, 4, 0, 2, 2, 6, 2, 8, 8, 4, 4, 4, 8, 2,
		10, 6, 8, 6, 0, 6, 4, 4, 4, 2, 4, 4, 0, 0, 2, 4,
		2, 2, 2, 4, 0, 0, 0, 2, 8, 4, 4, 6, 10, 2, 14, 4,
		2, 4, 0, 2, 10, 4, 2, 0, 2, 2, 6, 2, 8, 8, 10, 2,
		12, 4, 6, 8, 2, 6, 2, 8, 0, 4, 0, 2, 0, 8, 2, 0,
		0, 4, 0, 2, 4, 4, 8, 6, 10, 6, 2, 12, 0, 0, 0, 6,
		0, 10, 2, 0, 6, 2, 10, 2, 6, 0, 2, 0, 6, 6, 4, 8,
		8, 4, 6, 0, 6, 4, 4, 8, 4, 6, 8, 0, 2, 2, 2, 0,
		2, 2, 6, 10, 2, 0, 0, 6, 4, 4, 12, 8, 4, 2, 2, 0,
		0, 12, 6, 4, 6, 0, 4, 4, 4, 0, 4, 6, 4, 2, 4, 4,
		0, 12, 4, 6, 2, 4, 4, 0, 10, 0, 0, 8, 0, 8, 0, 6,
		8, 2, 4, 0, 4, 0, 4, 2, 0, 8, 4, 2, 6, 16, 2, 2,
		6, 2, 2, 2, 6, 6, 4, 8, 2, 2, 6, 2, 2, 2, 4, 8,
		0, 8, 8, 10, 6, 2, 2, 0, 4, 0, 4, 2, 4, 0, 4, 10,
		0, 2, 0, 0, 8, 0, 10, 4, 10, 0, 8, 4, 4, 4, 4, 6,
		4, 0, 2, 8, 4, 2, 2, 2, 4, 8, 2, 0, 4, 10, 10, 2,
		16, 4, 4, 2, 8, 2, 2, 6, 4, 4, 4, 2, 0, 2, 2, 2,
		0, 2, 6, 2, 8, 4, 6, 0, 10, 2, 2, 4, 4, 10, 4, 0,
		0, 16, 10, 2, 4, 2, 4, 2, 8, 0, 0, 8, 0, 6, 2, 0,
		4, 4, 0, 10, 2, 4, 2, 14, 4, 2, 6, 6, 0, 0, 6, 0,
		4, 0, 0, 2, 0, 8, 2, 4, 0, 2, 4, 4, 4, 14, 10, 6
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 2, 0, 4, 2, 12, 0, 14, 0, 4, 8, 2, 6, 10,
		0, 0, 0, 2, 0, 2, 0, 8, 0, 4, 12, 10, 4, 6, 8, 8,
		8, 6, 10, 4, 8, 6, 0, 6, 4, 4, 0, 0, 0, 4, 2, 2,
		0, 0, 0, 4, 0, 2, 4, 2, 0, 12, 8, 4, 6, 8, 10, 4,
		6, 2, 4, 8, 6, 10, 6, 2, 2, 8, 2, 0, 2, 0, 4, 2,
		0, 10, 6, 6, 10, 0, 4, 12, 2, 4, 0, 0, 6, 4, 0, 0,
		2, 0, 0, 4, 4, 4, 4, 2, 10, 4, 4, 8, 4, 4, 4, 6,
		0, 0, 0, 10, 0, 4, 4, 6, 0, 6, 6, 6, 6, 0, 8, 8,
		10, 2, 0, 2, 10, 4, 6, 2, 0, 6, 0, 4, 6, 2, 4, 6,
		0, 10, 6, 0, 14, 6, 4, 0, 4, 6, 6, 0, 4, 0, 2, 2,
		2, 6, 2, 10, 2, 2, 4, 0, 4, 2, 6, 0, 2, 8, 14, 0,
		0, 0, 0, 8, 0, 12, 12, 4, 0, 8, 0, 4, 2, 10, 2, 2,
		8, 2, 8, 0, 0, 4, 2, 0, 2, 8, 14, 2, 6, 2, 4, 2,
		0, 4, 4, 2, 4, 2, 4, 4, 10, 4, 4, 4, 4, 4, 2, 8,
		4, 6, 4, 6, 2, 2, 4, 8, 6, 2, 6, 2, 0, 6, 2, 4,
		0, 0, 0, 4, 0, 12, 4, 8, 0, 4, 2, 6, 2, 14, 0, 8,
		8, 2, 2, 6, 4, 0, 2, 0, 8, 4, 12, 2, 10, 0, 2, 2,
		0, 2, 8, 2, 4, 8, 0, 8, 8, 0, 2, 2, 4, 2, 14, 0,
		4, 4, 12, 0, 2, 2, 2, 10, 2, 2, 2, 2, 4, 4, 4, 8,
		0, 6, 4, 4, 6, 4, 6, 2, 8, 6, 6, 2, 2, 0, 0, 8,
		4, 8, 2, 8, 2, 4, 8, 0, 4, 2, 2, 2, 2, 6, 8, 2,
		0, 6, 10, 2, 8, 4, 2, 0, 2, 2, 2, 8, 4, 6, 4, 4,
		0, 6, 6, 0, 6, 2, 4, 4, 6, 2, 2, 10, 6, 8, 2, 0,
		0, 8, 4, 6, 6, 0, 6, 2, 4, 0, 4, 2, 10, 0, 6, 6,
		4, 2, 4, 8, 4, 2, 10, 2, 2, 2, 6, 8, 2, 6, 0, 2,
		0, 8, 6, 4, 4, 0, 6, 4, 4, 8, 0, 10, 2, 2, 2, 4,
		4, 10, 2, 0, 2, 4, 2, 4, 8, 2, 2, 8, 4, 2, 8, 2,
		0, 6, 8, 8, 4, 2, 8, 0, 12, 0, 10, 0, 4, 0, 2, 0,
		0, 2, 0, 6, 2, 8, 4, 6, 2, 0, 4, 2, 4, 10, 0, 14,
		0, 4, 8, 2, 4, 6, 0, 4, 10, 0, 2, 6, 4, 8, 4, 2,
		0, 6, 8, 0, 10, 6, 4, 6, 4, 2, 2, 10, 4, 0, 0, 2,
		0, 0, 0, 0, 0, 4, 4, 8, 0, 2, 2, 4, 10, 16, 12, 2,
		10, 8, 8, 0, 8, 4, 2, 4, 0, 6, 6, 6, 0, 0, 2, 0,
		12, 6, 4, 4, 2, 4, 10, 2, 0, 4, 4, 2, 4, 4, 0, 2,
		2, 2, 0, 6, 0, 2, 4, 0, 4, 12, 4, 2, 6, 4, 8, 8,
		4, 8, 2, 12, 6, 4, 2, 10, 2, 2, 2, 4, 2, 0, 4, 0,
		6, 0, 2, 0, 8, 2, 0, 2, 8, 8, 2, 2, 4, 4, 10, 6,
		6, 2, 0, 4, 4, 0, 4, 0, 4, 2, 14, 0, 8, 10, 0, 6,
		0, 2, 4, 16, 8, 6, 6, 6, 0, 2, 4, 4, 0, 2, 2, 2,
		6, 2, 10, 0, 6, 4, 0, 4, 4, 2, 4, 8, 2, 2, 8, 2,
		0, 2, 8, 4, 0, 4, 0, 6, 4, 10, 4, 8, 4, 4, 4, 2,
		2, 6, 0, 4, 2, 4, 4, 6, 4, 8, 4, 4, 4, 2, 4, 6,
		10, 2, 6, 6, 4, 4, 8, 0, 4, 2, 2, 0, 2, 4, 4, 6,
		10, 4, 6, 2, 4, 2, 2, 2, 4, 10, 4, 4, 0, 2, 6, 2,
		4, 2, 4, 4, 4, 2, 4, 16, 2, 0, 0, 4, 4, 2, 6, 6,
		4, 0, 2, 10, 0, 6, 10, 4, 2, 6, 6, 2, 2, 0, 2, 8,
		8, 2, 0, 0, 4, 4, 4, 2, 6, 4, 6, 2, 4, 8, 4, 6,
		0, 10, 8, 6, 2, 0, 4, 2, 10, 4, 4, 6, 2, 0, 6, 0,
		2, 6, 2, 0, 4, 2, 8, 8, 2, 2, 2, 0, 2, 12, 6, 6,
		2, 0, 4, 8, 2, 8, 4, 4, 8, 4, 2, 8, 6, 2, 0, 2,
		4, 4, 6, 8, 6, 6, 0, 2, 2, 2, 6, 4, 12, 0, 0, 2,
		0, 6, 2, 2, 16, 2, 2, 2, 12, 2, 4, 0, 4, 2, 0, 8,
		4, 6, 0, 10, 8, 0, 2, 2, 6, 0, 0, 6, 2, 10, 2, 6,
		4, 4, 4, 4, 0, 6, 6, 4, 4, 4, 4, 4, 0, 6, 2, 8,
		4, 8, 2, 4, 2, 2, 6, 0, 2, 4, 8, 4, 10, 0, 6, 2,
		0, 8, 12, 0, 2, 2, 6, 6, 2, 10, 2, 2, 0, 8, 0, 4,
		2, 6, 4, 0, 6, 4, 6, 4, 8, 0, 4, 4, 2, 4, 8, 2,
		6, 0, 2, 2, 4, 6, 4, 4, 4, 2, 2, 6, 12, 2, 6, 2,
		2, 2, 6, 0, 0, 10, 4, 8, 4, 2, 4, 8, 4, 4, 0, 6,
		0, 2, 4, 2, 12, 2, 0, 6, 2, 0, 2, 8, 4, 6, 4, 10,
		4, 6, 8, 6, 2, 2, 2, 2, 10, 2, 6, 6, 2, 4, 2, 0,
		8, 6, 4, 4, 2, 10, 2, 0, 2, 2, 4, 2, 4, 2, 10, 2,
		2, 6, 4, 0, 0, 10, 8, 2, 2, 8, 6, 4, 6, 2, 0, 4
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 16, 16, 0, 0, 16, 16, 0, 0, 0, 0, 0,
		0, 0, 0, 8, 0, 4, 4, 8, 0, 4, 4, 8, 8, 8, 8, 0,
		8, 6, 2, 0, 2, 4, 8, 2, 6, 0, 4, 6, 0, 6, 2, 8,
		0, 0, 0, 8, 0, 0, 12, 4, 0, 12, 0, 4, 8, 4, 4, 8,
		4, 2, 2, 8, 2, 12, 0, 2, 2, 0, 12, 2, 8, 2, 2, 4,
		0, 8, 8, 4, 8, 8, 0, 0, 8, 0, 8, 0, 4, 0, 0, 8,
		4, 2, 6, 4, 6, 0, 16, 6, 2, 0, 0, 2, 4, 2, 6, 4,
		0, 0, 0, 4, 0, 8, 4, 8, 0, 4, 8, 8, 4, 8, 8, 0,
		8, 4, 4, 4, 4, 0, 8, 4, 4, 0, 0, 4, 4, 4, 4, 8,
		0, 6, 6, 0, 6, 4, 4, 6, 6, 4, 4, 6, 0, 6, 6, 0,
		0, 12, 0, 8, 0, 0, 0, 0, 12, 0, 0, 12, 8, 12, 0, 0,
		0, 0, 0, 4, 0, 8, 4, 8, 0, 4, 8, 8, 4, 8, 8, 0,
		8, 4, 4, 4, 4, 0, 0, 4, 4, 8, 0, 4, 4, 4, 4, 8,
		0, 6, 6, 4, 6, 0, 4, 6, 6, 4, 0, 6, 4, 6, 6, 0,
		0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
		0, 0, 0, 0, 0, 8, 12, 4, 0, 12, 8, 4, 0, 4, 4, 8,
		4, 2, 2, 16, 2, 4, 0, 2, 2, 0, 4, 2, 16, 2, 2, 4,
		0, 0, 0, 8, 0, 4, 4, 8, 0, 4, 4, 8, 8, 8, 8, 0,
		8, 2, 6, 0, 6, 4, 0, 6, 2, 8, 4, 2, 0, 2, 6, 8,
		0, 8, 8, 0, 8, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 16,
		8, 4, 4, 0, 4, 8, 0, 4, 4, 0, 8, 4, 0, 4, 4, 8,
		0, 8, 8, 4, 8, 8, 0, 0, 8, 0, 8, 0, 4, 0, 0, 8,
		4, 6, 2, 4, 2, 0, 0, 2, 6, 16, 0, 6, 4, 6, 2, 4,
		0, 8, 8, 8, 8, 4, 0, 0, 8, 0, 4, 0, 8, 0, 0, 8,
		4, 4, 4, 0, 4, 4, 16, 4, 4, 0, 4, 4, 0, 4, 4, 4,
		0, 6, 6, 4, 6, 0, 4, 6, 6, 4, 0, 6, 4, 6, 6, 0,
		0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
		0, 8, 8, 8, 8, 4, 0, 0, 8, 0, 4, 0, 8, 0, 0, 8,
		4, 4, 4, 0, 4, 4, 0, 4, 4, 16, 4, 4, 0, 4, 4, 4,
		0, 6, 6, 0, 6, 4, 4, 6, 6, 4, 4, 6, 0, 6, 6, 0,
		0, 0, 12, 8, 12, 0, 0, 12, 0, 0, 0, 0, 8, 0, 12, 0,
		0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 8, 12, 12, 0,
		0, 4, 8, 0, 8, 4, 8, 8, 4, 0, 4, 4, 0, 4, 8, 0,
		8, 2, 2, 0, 2, 4, 8, 6, 2, 8, 4, 6, 0, 6, 6, 0,
		4, 6, 2, 8, 2, 4, 0, 2, 6, 0, 4, 6, 8, 6, 2, 4,
		0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
		0, 8, 4, 4, 4, 0, 0, 4, 8, 8, 0, 8, 4, 8, 4, 0,
		0, 6, 6, 0, 6, 4, 8, 2, 6, 8, 4, 2, 0, 2, 2, 8,
		4, 6, 2, 8, 2, 4, 0, 2, 6, 0, 4, 6, 8, 6, 2, 4,
		16, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0,
		0, 6, 2, 8, 2, 4, 0, 2, 6, 8, 4, 6, 8, 6, 2, 0,
		0, 2, 2, 16, 2, 4, 4, 2, 2, 4, 4, 2, 16, 2, 2, 0,
		8, 0, 4, 0, 4, 8, 16, 4, 0, 0, 8, 0, 0, 0, 4, 8,
		8, 4, 4, 4, 4, 0, 8, 4, 4, 8, 0, 4, 4, 4, 4, 0,
		4, 2, 6, 4, 6, 8, 0, 6, 2, 0, 8, 2, 4, 2, 6, 4,
		16, 0, 0, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 0, 0, 16,
		16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 16,
		0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
		0, 8, 4, 4, 4, 0, 0, 4, 8, 8, 0, 8, 4, 8, 4, 0,
		16, 6, 6, 4, 6, 0, 4, 2, 6, 4, 0, 2, 4, 2, 2, 0,
		0, 2, 6, 4, 6, 8, 8, 6, 2, 0, 8, 2, 4, 2, 6, 0,
		0, 12, 12, 8, 12, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0,
		0, 4, 8, 0, 8, 4, 8, 8, 4, 0, 4, 4, 0, 4, 8, 0,
		0, 2, 2, 4, 2, 0, 4, 6, 2, 4, 0, 6, 4, 6, 6, 16,
		0, 2, 6, 4, 6, 8, 8, 6, 2, 0, 8, 2, 4, 2, 6, 0,
		0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 16,
		0, 6, 2, 8, 2, 4, 0, 2, 6, 8, 4, 6, 8, 6, 2, 0,
		0, 4, 4, 0, 4, 8, 8, 4, 4, 8, 8, 4, 0, 4, 4, 0,
		16, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 16,
		0, 4, 4, 4, 4, 0, 8, 4, 4, 8, 0, 4, 4, 4, 4, 8,
		4, 2, 6, 4, 6, 8, 0, 6, 2, 0, 8, 2, 4, 2, 6, 4,
		0, 2, 2, 8, 2, 12, 4, 2, 2, 4, 12, 2, 8, 2, 2, 0,
		8, 4, 0, 8, 0, 0, 0, 0, 4, 16, 0, 4, 8, 4, 0, 8
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 4, 0, 10, 8, 6, 0, 4, 2, 2, 12, 10, 2, 4,
		0, 0, 0, 4, 0, 10, 6, 4, 0, 6, 4, 2, 4, 8, 10, 6,
		8, 2, 4, 6, 4, 4, 2, 2, 6, 8, 6, 4, 4, 0, 2, 2,
		0, 0, 0, 8, 0, 4, 10, 6, 0, 6, 6, 4, 8, 6, 0, 6,
		12, 2, 0, 4, 0, 4, 8, 2, 4, 0, 16, 2, 0, 2, 0, 8,
		0, 8, 4, 6, 4, 6, 2, 2, 4, 4, 6, 0, 6, 0, 2, 10,
		2, 0, 4, 8, 4, 2, 6, 6, 2, 8, 6, 2, 2, 0, 6, 6,
		0, 0, 0, 2, 0, 8, 10, 4, 0, 4, 10, 4, 8, 4, 4, 6,
		8, 6, 0, 4, 0, 6, 6, 2, 2, 10, 2, 8, 6, 2, 0, 2,
		0, 6, 8, 6, 0, 8, 0, 0, 8, 10, 4, 2, 8, 0, 0, 4,
		4, 2, 2, 4, 8, 10, 6, 4, 2, 6, 2, 2, 6, 2, 2, 2,
		0, 0, 0, 10, 0, 2, 10, 2, 0, 6, 10, 6, 6, 6, 2, 4,
		10, 4, 2, 2, 0, 6, 16, 0, 0, 2, 10, 2, 2, 4, 0, 4,
		0, 6, 4, 8, 4, 6, 10, 2, 4, 4, 4, 2, 4, 0, 2, 4,
		4, 4, 0, 8, 0, 2, 0, 2, 8, 2, 4, 2, 8, 4, 4, 12,
		0, 0, 0, 0, 0, 4, 4, 12, 0, 2, 8, 10, 4, 6, 12, 2,
		6, 6, 10, 10, 4, 0, 2, 6, 2, 4, 0, 6, 2, 4, 2, 0,
		0, 2, 4, 2, 10, 4, 0, 10, 8, 6, 0, 6, 0, 6, 6, 0,
		0, 0, 6, 2, 8, 0, 0, 4, 4, 6, 2, 8, 2, 8, 10, 4,
		0, 12, 2, 6, 4, 0, 4, 4, 8, 4, 4, 4, 6, 2, 4, 0,
		4, 8, 0, 2, 8, 0, 2, 4, 2, 2, 4, 2, 4, 8, 8, 6,
		0, 6, 10, 2, 14, 0, 2, 2, 4, 4, 0, 6, 0, 4, 6, 4,
		0, 6, 8, 4, 8, 4, 0, 2, 8, 4, 0, 2, 2, 8, 6, 2,
		0, 10, 8, 0, 6, 4, 0, 4, 4, 4, 6, 4, 4, 4, 0, 6,
		0, 4, 6, 2, 4, 4, 2, 6, 4, 2, 2, 4, 12, 2, 10, 0,
		0, 2, 16, 2, 12, 2, 0, 6, 4, 0, 0, 4, 0, 4, 4, 8,
		2, 8, 12, 0, 0, 2, 2, 6, 8, 4, 0, 6, 0, 0, 8, 6,
		0, 10, 2, 6, 6, 6, 6, 4, 8, 2, 0, 4, 4, 4, 2, 0,
		4, 6, 2, 0, 8, 2, 4, 6, 6, 0, 8, 6, 2, 4, 2, 4,
		0, 2, 6, 2, 4, 0, 0, 2, 12, 2, 2, 6, 2, 10, 10, 4,
		0, 6, 8, 4, 8, 8, 0, 6, 6, 2, 0, 6, 0, 6, 2, 2,
		0, 0, 0, 8, 0, 8, 2, 6, 0, 4, 4, 4, 6, 6, 8, 8,
		0, 0, 0, 6, 6, 2, 6, 4, 6, 10, 14, 4, 0, 0, 4, 2,
		14, 4, 0, 10, 0, 2, 12, 2, 2, 2, 10, 2, 0, 0, 2, 2,
		2, 0, 0, 4, 2, 2, 10, 4, 0, 8, 8, 2, 6, 8, 0, 8,
		6, 2, 8, 4, 4, 4, 6, 2, 2, 6, 6, 2, 6, 2, 2, 2,
		6, 0, 0, 8, 2, 8, 2, 6, 6, 4, 2, 2, 4, 2, 6, 6,
		12, 0, 0, 4, 0, 4, 4, 4, 0, 8, 4, 0, 12, 8, 0, 4,
		12, 2, 0, 2, 0, 12, 2, 2, 4, 4, 8, 4, 8, 2, 2, 0,
		2, 8, 4, 6, 2, 4, 6, 0, 6, 6, 4, 0, 2, 2, 2, 10,
		6, 4, 6, 8, 8, 4, 6, 2, 0, 0, 2, 2, 10, 0, 2, 4,
		4, 4, 0, 2, 2, 4, 6, 2, 0, 0, 6, 4, 10, 4, 4, 12,
		4, 6, 2, 6, 0, 0, 12, 2, 0, 4, 12, 2, 6, 4, 0, 4,
		8, 6, 2, 6, 4, 8, 6, 0, 4, 4, 0, 2, 6, 0, 6, 2,
		4, 4, 0, 4, 0, 6, 4, 2, 4, 12, 0, 4, 4, 6, 4, 6,
		6, 0, 2, 4, 0, 6, 6, 4, 2, 10, 6, 10, 6, 2, 0, 0,
		10, 4, 0, 2, 2, 6, 10, 2, 0, 2, 2, 4, 6, 2, 2, 10,
		0, 4, 8, 4, 6, 4, 0, 6, 10, 4, 2, 4, 2, 6, 4, 0,
		0, 6, 6, 4, 10, 2, 0, 0, 4, 4, 0, 0, 4, 6, 12, 6,
		4, 6, 0, 2, 6, 4, 6, 0, 6, 0, 4, 6, 4, 10, 6, 0,
		8, 10, 0, 14, 8, 0, 0, 8, 2, 0, 2, 4, 0, 4, 4, 0,
		0, 4, 4, 2, 14, 4, 0, 8, 6, 8, 2, 2, 0, 4, 6, 0,
		0, 4, 16, 0, 8, 4, 0, 4, 4, 4, 0, 8, 0, 4, 4, 4,
		4, 4, 4, 6, 2, 2, 2, 12, 2, 4, 4, 8, 2, 4, 4, 0,
		4, 2, 2, 2, 4, 2, 0, 8, 2, 2, 2, 12, 6, 2, 8, 6,
		0, 4, 8, 4, 12, 0, 0, 8, 10, 2, 0, 0, 0, 4, 2, 10,
		0, 8, 12, 0, 2, 2, 2, 2, 12, 4, 0, 8, 0, 4, 4, 4,
		0, 14, 4, 0, 4, 6, 0, 0, 6, 2, 10, 8, 0, 0, 4, 6,
		0, 2, 2, 2, 4, 4, 8, 6, 8, 2, 2, 2, 6, 14, 2, 0,
		0, 0, 10, 2, 6, 0, 0, 2, 6, 2, 2, 10, 2, 4, 10, 8,
		0, 6, 12, 2, 4, 8, 0, 8, 8, 2, 2, 0, 2, 2, 4, 4,
		4, 4, 10, 0, 2, 4, 8, 8, 2, 2, 0, 2, 6, 8, 4, 0,
		8, 6, 6, 0, 4, 2, 2, 4, 4, 2, 8, 6, 2, 4, 6, 0,
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6, 0, 2, 6, 2, 0, 4, 2, 4, 6, 16, 14, 2,
		0, 0, 0, 2, 0, 10, 6, 10, 0, 2, 4, 8, 6, 6, 8, 2,
		0, 8, 0, 8, 0, 6, 4, 6, 4, 4, 4, 12, 2, 4, 2, 0,
		0, 0, 0, 8, 0, 0, 8, 0, 0, 6, 8, 10, 2, 4, 10, 8,
		10, 2, 4, 4, 4, 8, 8, 4, 2, 2, 0, 4, 0, 8, 0, 4,
		0, 8, 4, 4, 8, 4, 2, 2, 12, 0, 2, 6, 6, 2, 2, 2,
		6, 6, 4, 0, 2, 10, 2, 2, 2, 2, 6, 6, 8, 0, 6, 2,
		0, 0, 0, 6, 0, 2, 16, 4, 0, 2, 6, 2, 4, 12, 6, 4,
		10, 4, 2, 6, 0, 2, 6, 2, 4, 0, 8, 6, 4, 4, 2, 4,
		0, 14, 4, 4, 0, 2, 2, 2, 10, 4, 4, 4, 6, 4, 2, 2,
		4, 6, 2, 0, 2, 2, 12, 8, 2, 2, 2, 6, 8, 2, 0, 6,
		0, 0, 0, 12, 0, 10, 4, 6, 0, 8, 4, 4, 2, 12, 2, 0,
		12, 0, 2, 10, 6, 4, 4, 2, 4, 2, 6, 0, 2, 6, 0, 4,
		0, 6, 4, 0, 4, 4, 10, 8, 6, 2, 4, 6, 2, 0, 6, 2,
		2, 2, 2, 2, 6, 2, 6, 2, 10, 4, 8, 2, 6, 4, 4, 2,
		0, 0, 0, 8, 0, 8, 0, 12, 0, 4, 2, 6, 8, 4, 6, 6,
		6, 2, 6, 4, 6, 2, 6, 4, 6, 6, 4, 2, 4, 0, 6, 0,
		0, 8, 4, 2, 0, 4, 2, 0, 4, 10, 6, 2, 8, 6, 4, 4,
		6, 6, 12, 0, 12, 2, 0, 6, 6, 2, 0, 4, 0, 2, 4, 2,
		0, 4, 6, 2, 8, 6, 0, 2, 6, 10, 4, 0, 2, 4, 6, 4,
		2, 2, 6, 6, 4, 4, 2, 6, 2, 6, 8, 4, 4, 0, 4, 4,
		0, 4, 14, 6, 8, 4, 2, 6, 2, 0, 2, 0, 4, 2, 0, 10,
		2, 6, 8, 0, 0, 2, 0, 2, 2, 6, 0, 8, 8, 2, 12, 6,
		0, 4, 6, 6, 8, 4, 2, 2, 6, 4, 6, 4, 2, 4, 2, 4,
		2, 6, 0, 2, 4, 4, 4, 6, 4, 8, 6, 4, 2, 2, 6, 4,
		0, 6, 6, 0, 8, 2, 4, 6, 4, 2, 4, 6, 2, 0, 4, 10,
		0, 4, 10, 2, 4, 4, 2, 6, 6, 6, 2, 2, 6, 6, 2, 2,
		0, 0, 8, 2, 12, 2, 6, 2, 8, 6, 6, 2, 4, 0, 4, 2,
		2, 4, 0, 6, 8, 6, 0, 2, 6, 8, 6, 0, 2, 4, 0, 10,
		0, 10, 8, 2, 8, 2, 0, 2, 6, 4, 2, 4, 6, 4, 2, 4,
		0, 6, 6, 8, 6, 4, 2, 4, 4, 2, 2, 0, 2, 4, 2, 12,
		0, 0, 0, 0, 0, 6, 6, 4, 0, 4, 8, 8, 4, 6, 10, 8,
		2, 8, 6, 8, 4, 4, 6, 6, 8, 4, 0, 4, 0, 2, 2, 0,
		16, 2, 4, 6, 2, 4, 2, 0, 6, 4, 8, 2, 0, 2, 2, 4,
		0, 4, 0, 4, 4, 6, 10, 4, 2, 2, 6, 2, 4, 6, 6, 4,
		10, 8, 0, 6, 12, 6, 10, 4, 8, 0, 0, 0, 0, 0, 0, 0,
		0, 2, 4, 2, 0, 4, 4, 0, 4, 0, 10, 10, 4, 10, 6, 4,
		2, 2, 0, 12, 2, 2, 6, 2, 4, 4, 8, 0, 6, 6, 8, 0,
		8, 4, 0, 8, 2, 4, 2, 4, 0, 6, 2, 4, 4, 8, 2, 6,
		6, 8, 4, 6, 0, 4, 2, 2, 4, 8, 2, 6, 4, 2, 2, 4,
		2, 4, 4, 0, 8, 8, 6, 8, 6, 4, 0, 4, 4, 4, 2, 0,
		6, 0, 0, 6, 6, 4, 6, 8, 2, 4, 0, 2, 2, 4, 6, 8,
		12, 0, 4, 0, 0, 4, 2, 2, 2, 6, 10, 6, 10, 2, 4, 0,
		4, 2, 6, 0, 0, 6, 8, 6, 4, 2, 2, 8, 4, 6, 4, 2,
		6, 2, 2, 6, 6, 4, 4, 2, 6, 2, 4, 8, 4, 2, 4, 2,
		4, 6, 2, 4, 2, 4, 4, 2, 4, 2, 4, 6, 4, 10, 4, 2,
		10, 0, 4, 8, 0, 6, 6, 2, 0, 4, 4, 2, 6, 2, 2, 8,
		0, 12, 8, 2, 0, 6, 0, 0, 6, 6, 0, 2, 8, 2, 6, 6,
		2, 6, 10, 4, 2, 2, 2, 4, 6, 0, 2, 6, 0, 2, 4, 12,
		4, 2, 2, 8, 10, 8, 8, 6, 0, 2, 2, 4, 4, 2, 2, 0,
		4, 2, 2, 2, 6, 0, 4, 0, 10, 6, 6, 4, 0, 4, 8, 6,
		0, 4, 4, 2, 6, 4, 0, 4, 6, 2, 6, 4, 2, 8, 0, 12,
		6, 12, 4, 2, 4, 2, 2, 4, 8, 2, 2, 0, 6, 4, 4, 2,
		0, 2, 2, 4, 4, 4, 4, 0, 2, 10, 12, 4, 0, 10, 4, 2,
		10, 2, 2, 6, 14, 2, 2, 6, 2, 0, 4, 6, 2, 0, 4, 2,
		0, 4, 14, 0, 8, 2, 0, 4, 4, 4, 2, 0, 8, 2, 4, 8,
		2, 4, 8, 0, 6, 2, 0, 6, 2, 6, 4, 2, 8, 6, 2, 6,
		8, 4, 0, 4, 6, 2, 0, 4, 6, 8, 6, 0, 6, 0, 4, 6,
		0, 4, 6, 6, 2, 2, 2, 14, 0, 12, 0, 4, 2, 2, 8, 0,
		0, 6, 16, 0, 2, 2, 2, 8, 4, 2, 0, 12, 6, 2, 2, 0,
		0, 6, 2, 2, 2, 6, 8, 2, 4, 2, 6, 2, 6, 2, 4, 10,
		4, 2, 2, 4, 4, 0, 6, 10, 4, 2, 4, 6, 6, 2, 6, 2,
		0, 4, 6, 6, 4, 8, 4, 0, 4, 8, 4, 0, 4, 8, 2, 2
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 2, 0, 4, 4, 14, 0, 12, 4, 6, 2, 6, 6, 4,
		0, 0, 0, 0, 0, 12, 2, 2, 0, 4, 0, 4, 8, 12, 6, 14,
		8, 2, 12, 2, 6, 8, 6, 0, 6, 4, 4, 2, 2, 0, 0, 2,
		0, 0, 0, 8, 0, 4, 4, 8, 0, 8, 8, 12, 2, 6, 2, 2,
		6, 0, 0, 2, 8, 0, 8, 4, 0, 2, 6, 0, 10, 6, 6, 6,
		0, 2, 12, 0, 8, 4, 8, 2, 4, 4, 4, 2, 6, 0, 6, 2,
		4, 6, 4, 12, 0, 4, 2, 0, 0, 14, 2, 6, 4, 0, 0, 6,
		0, 0, 0, 8, 0, 0, 6, 10, 0, 4, 12, 4, 6, 6, 0, 8,
		10, 8, 4, 8, 6, 2, 2, 0, 2, 6, 8, 2, 0, 6, 0, 0,
		0, 10, 6, 2, 12, 2, 4, 0, 4, 4, 6, 4, 4, 0, 0, 6,
		0, 2, 2, 2, 4, 8, 6, 4, 4, 0, 4, 2, 6, 4, 2, 14,
		0, 0, 0, 4, 0, 4, 8, 4, 0, 2, 6, 0, 14, 12, 8, 2,
		6, 6, 2, 4, 2, 6, 4, 6, 6, 4, 8, 8, 0, 2, 0, 0,
		0, 12, 10, 10, 0, 2, 4, 2, 8, 6, 4, 2, 0, 0, 2, 2,
		2, 0, 0, 0, 6, 8, 8, 0, 6, 2, 4, 6, 8, 0, 6, 8,
		0, 0, 0, 4, 0, 2, 8, 6, 0, 6, 4, 10, 8, 4, 8, 4,
		6, 10, 10, 4, 4, 2, 0, 4, 4, 0, 2, 8, 4, 2, 2, 2,
		0, 0, 8, 8, 2, 8, 2, 8, 6, 4, 2, 8, 0, 0, 8, 0,
		4, 4, 2, 2, 8, 6, 0, 2, 2, 2, 0, 4, 6, 8, 14, 0,
		0, 8, 6, 2, 8, 8, 2, 6, 4, 2, 0, 2, 8, 6, 0, 2,
		4, 4, 8, 2, 4, 0, 4, 10, 8, 2, 4, 4, 4, 2, 0, 4,
		0, 6, 10, 2, 2, 2, 2, 4, 10, 8, 2, 2, 0, 4, 10, 0,
		8, 2, 4, 2, 6, 4, 0, 6, 4, 4, 2, 2, 0, 4, 8, 8,
		0, 16, 2, 2, 6, 0, 6, 0, 6, 2, 8, 0, 6, 0, 2, 8,
		0, 8, 0, 2, 4, 4, 10, 4, 8, 0, 6, 4, 2, 6, 2, 4,
		0, 2, 4, 8, 12, 4, 0, 6, 4, 4, 0, 2, 0, 6, 4, 8,
		0, 6, 2, 6, 4, 2, 4, 4, 6, 4, 8, 4, 2, 0, 10, 2,
		0, 8, 4, 4, 2, 6, 6, 6, 6, 4, 6, 8, 0, 2, 0, 2,
		4, 4, 4, 0, 0, 2, 4, 2, 4, 2, 2, 4, 10, 10, 8, 4,
		0, 0, 2, 2, 12, 6, 2, 0, 12, 2, 2, 4, 2, 6, 8, 4,
		2, 2, 10, 14, 2, 4, 2, 4, 4, 6, 0, 2, 4, 8, 0, 0,
		0, 0, 0, 14, 0, 8, 4, 2, 0, 4, 2, 8, 2, 6, 0, 14,
		4, 2, 6, 2, 12, 2, 4, 0, 6, 4, 10, 2, 4, 2, 2, 2,
		10, 6, 0, 2, 4, 4, 10, 0, 4, 0, 12, 2, 8, 0, 0, 2,
		0, 6, 2, 2, 2, 4, 6, 10, 0, 4, 8, 2, 2, 6, 0, 10,
		4, 2, 0, 6, 8, 2, 6, 0, 8, 2, 2, 0, 8, 2, 12, 2,
		2, 0, 2, 16, 2, 4, 6, 4, 6, 8, 2, 4, 0, 6, 0, 2,
		6, 10, 0, 10, 0, 6, 4, 4, 2, 2, 4, 6, 2, 4, 2, 2,
		4, 0, 2, 0, 2, 2, 14, 0, 4, 6, 6, 2, 12, 2, 4, 4,
		14, 4, 6, 4, 4, 6, 2, 0, 6, 6, 2, 2, 4, 0, 2, 2,
		2, 2, 0, 2, 0, 8, 4, 2, 4, 6, 4, 4, 6, 4, 12, 4,
		2, 4, 0, 0, 0, 2, 8, 12, 0, 8, 2, 4, 8, 4, 4, 6,
		16, 6, 2, 4, 6, 10, 2, 2, 2, 2, 2, 2, 4, 2, 2, 0,
		2, 6, 6, 8, 2, 2, 0, 6, 0, 8, 4, 2, 2, 6, 8, 2,
		6, 2, 4, 2, 8, 8, 2, 8, 2, 4, 4, 0, 2, 0, 8, 4,
		2, 4, 8, 0, 2, 2, 2, 4, 0, 2, 8, 4, 14, 6, 0, 6,
		2, 2, 2, 8, 0, 2, 2, 6, 4, 6, 8, 8, 6, 2, 0, 6,
		0, 6, 8, 2, 8, 4, 4, 0, 10, 4, 4, 6, 0, 0, 2, 6,
		0, 8, 4, 0, 6, 2, 2, 6, 6, 0, 0, 2, 6, 4, 8, 10,
		2, 4, 0, 0, 6, 4, 10, 6, 6, 4, 6, 2, 4, 6, 2, 2,
		0, 16, 6, 8, 2, 0, 2, 2, 4, 2, 8, 4, 0, 4, 6, 0,
		0, 4, 14, 8, 2, 2, 2, 4, 16, 2, 2, 2, 0, 2, 0, 4,
		0, 6, 0, 0, 10, 8, 2, 2, 6, 0, 0, 8, 6, 4, 4, 8,
		2, 0, 2, 2, 4, 6, 4, 4, 2, 2, 4, 2, 4, 16, 10, 0,
		6, 6, 6, 8, 4, 2, 4, 4, 4, 0, 6, 8, 2, 4, 0, 0,
		0, 2, 2, 2, 8, 8, 0, 2, 2, 2, 0, 6, 6, 4, 10, 10,
		4, 4, 16, 8, 0, 6, 4, 2, 4, 4, 2, 6, 0, 2, 2, 0,
		16, 6, 4, 0, 2, 0, 2, 6, 0, 4, 8, 10, 0, 0, 4, 2,
		2, 0, 0, 2, 0, 4, 4, 4, 2, 6, 2, 6, 6, 12, 12, 2,
		0, 0, 8, 0, 12, 8, 2, 6, 6, 4, 0, 2, 2, 4, 6, 4,
		2, 4, 12, 2, 2, 2, 0, 4, 6, 10, 2, 6, 4, 2, 0, 6,
		4, 6, 6, 6, 2, 0, 4, 8, 2, 10, 4, 6, 0, 4, 2, 0,
		14, 0, 0, 0, 8, 0, 6, 8, 4, 2, 0, 0, 4, 8, 4, 6
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6, 0, 16, 10, 0, 0, 0, 6, 0, 14, 6, 2, 4,
		0, 0, 0, 8, 0, 10, 4, 2, 0, 10, 2, 4, 8, 8, 6, 2,
		6, 0, 2, 8, 2, 6, 4, 0, 6, 6, 6, 2, 2, 0, 8, 6,
		0, 0, 0, 2, 0, 4, 6, 12, 0, 6, 8, 4, 10, 4, 8, 0,
		4, 10, 6, 0, 0, 2, 6, 0, 4, 10, 4, 6, 8, 2, 0, 2,
		0, 0, 10, 4, 6, 4, 4, 8, 2, 6, 4, 2, 4, 2, 2, 6,
		6, 2, 8, 2, 8, 10, 6, 6, 4, 2, 0, 4, 0, 0, 0, 6,
		0, 0, 0, 4, 0, 6, 4, 2, 0, 8, 6, 10, 8, 2, 2, 12,
		8, 4, 0, 6, 0, 4, 4, 6, 2, 4, 6, 2, 12, 2, 0, 4,
		0, 0, 16, 4, 6, 6, 4, 0, 4, 6, 4, 2, 2, 0, 0, 10,
		2, 8, 0, 6, 2, 6, 0, 4, 4, 10, 0, 2, 10, 2, 6, 2,
		0, 0, 0, 2, 0, 10, 10, 6, 0, 6, 6, 6, 2, 6, 10, 0,
		6, 0, 4, 10, 2, 0, 8, 6, 2, 2, 6, 10, 2, 2, 2, 2,
		0, 0, 6, 8, 4, 8, 0, 2, 10, 6, 2, 4, 6, 2, 4, 2,
		8, 0, 4, 2, 2, 4, 2, 2, 2, 6, 4, 6, 0, 2, 14, 6,
		0, 0, 0, 4, 0, 0, 8, 12, 0, 0, 8, 8, 2, 10, 6, 6,
		0, 6, 4, 6, 2, 2, 6, 6, 4, 6, 4, 6, 0, 4, 4, 4,
		0, 4, 0, 8, 6, 2, 8, 4, 2, 4, 4, 6, 2, 4, 10, 0,
		4, 2, 2, 6, 8, 6, 2, 2, 14, 2, 2, 4, 2, 2, 2, 4,
		0, 16, 4, 2, 6, 0, 2, 6, 4, 0, 4, 6, 4, 6, 4, 0,
		0, 10, 6, 0, 6, 0, 2, 8, 2, 2, 0, 8, 2, 6, 6, 6,
		0, 12, 6, 4, 6, 0, 0, 0, 8, 6, 6, 2, 2, 6, 4, 2,
		0, 6, 8, 0, 6, 2, 4, 6, 6, 0, 2, 6, 4, 4, 2, 8,
		0, 12, 2, 2, 8, 0, 8, 0, 10, 4, 4, 2, 4, 2, 0, 6,
		6, 4, 8, 0, 8, 0, 4, 2, 0, 0, 12, 2, 4, 6, 2, 6,
		0, 4, 6, 2, 8, 8, 0, 4, 8, 0, 0, 0, 6, 2, 0, 16,
		2, 4, 8, 10, 2, 4, 2, 8, 2, 4, 8, 2, 0, 2, 4, 2,
		0, 12, 6, 4, 6, 4, 2, 2, 6, 0, 4, 4, 2, 10, 2, 0,
		8, 6, 0, 0, 10, 0, 0, 8, 10, 4, 2, 2, 2, 8, 4, 0,
		0, 4, 8, 6, 8, 2, 4, 4, 10, 2, 2, 4, 2, 0, 6, 2,
		4, 2, 4, 2, 6, 2, 4, 0, 2, 6, 2, 2, 2, 16, 8, 2,
		0, 0, 0, 16, 0, 4, 0, 0, 0, 14, 6, 4, 2, 0, 4, 14,
		0, 0, 2, 10, 2, 8, 10, 0, 0, 6, 6, 0, 10, 2, 2, 6,
		8, 0, 6, 0, 6, 4, 10, 2, 0, 6, 8, 0, 4, 4, 2, 4,
		4, 8, 0, 6, 0, 4, 8, 6, 2, 2, 10, 4, 8, 0, 0, 2,
		4, 0, 4, 8, 4, 6, 2, 4, 8, 6, 2, 0, 0, 4, 4, 8,
		0, 4, 6, 8, 2, 8, 8, 0, 4, 2, 4, 4, 2, 2, 6, 4,
		2, 6, 0, 6, 4, 4, 4, 6, 6, 0, 4, 4, 10, 4, 2, 2,
		6, 6, 0, 0, 2, 2, 6, 2, 4, 4, 6, 10, 2, 6, 2, 6,
		10, 2, 6, 2, 4, 12, 12, 0, 2, 2, 4, 0, 0, 0, 2, 6,
		4, 0, 0, 14, 2, 10, 4, 2, 8, 6, 4, 0, 4, 2, 2, 2,
		8, 8, 0, 2, 0, 2, 4, 0, 2, 6, 8, 14, 2, 8, 0, 0,
		2, 2, 0, 0, 4, 2, 10, 4, 6, 2, 4, 0, 6, 4, 8, 10,
		2, 6, 6, 2, 4, 6, 2, 0, 2, 6, 4, 0, 6, 4, 10, 4,
		8, 0, 4, 4, 6, 2, 0, 0, 6, 8, 2, 4, 6, 4, 4, 6,
		6, 2, 2, 4, 2, 2, 6, 12, 4, 0, 4, 2, 8, 8, 0, 2,
		8, 12, 4, 6, 6, 4, 2, 2, 2, 2, 4, 2, 2, 4, 0, 4,
		0, 4, 6, 2, 10, 2, 2, 2, 4, 8, 0, 0, 8, 4, 6, 6,
		4, 6, 8, 0, 4, 6, 0, 4, 4, 6, 10, 2, 2, 4, 4, 0,
		6, 6, 6, 2, 4, 6, 0, 2, 0, 6, 8, 2, 2, 6, 6, 2,
		6, 6, 4, 2, 4, 0, 0, 10, 2, 2, 0, 6, 8, 4, 0, 10,
		0, 2, 12, 4, 10, 4, 0, 4, 12, 0, 2, 4, 2, 2, 2, 4,
		6, 4, 4, 0, 10, 0, 0, 4, 10, 0, 0, 4, 2, 8, 8, 4,
		4, 6, 2, 2, 2, 2, 6, 8, 6, 4, 2, 6, 0, 4, 10, 0,
		2, 2, 8, 2, 4, 4, 4, 2, 6, 2, 0, 10, 6, 10, 2, 0,
		0, 4, 8, 4, 2, 6, 6, 2, 4, 2, 2, 4, 6, 4, 4, 6,
		4, 4, 4, 8, 0, 6, 0, 6, 4, 8, 2, 2, 2, 4, 8, 2,
		8, 8, 0, 4, 2, 0, 10, 4, 0, 0, 0, 4, 8, 6, 8, 2,
		8, 2, 6, 4, 4, 4, 4, 0, 6, 4, 4, 6, 4, 4, 4, 0,
		0, 6, 6, 6, 6, 0, 0, 8, 8, 2, 4, 8, 4, 2, 4, 0,
		2, 2, 8, 0, 10, 0, 2, 12, 0, 4, 0, 8, 0, 2, 6, 8,
		6, 4, 0, 0, 4, 4, 0, 10, 6, 2, 6, 12, 2, 4, 0, 4,
		0, 6, 6, 0, 4, 4, 6, 10, 0, 6, 8, 2, 0, 4, 8, 0
	}};
const byte dL[24][9] = {
	"\x00\x40\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x40\x00\x00\x00\x00\x00",
	"\x00\x40\x40\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x40\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x40\x00",
	"\x00\x00\x00\x00\x00\x40\x40\x00",
	"\x00\x10\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x10\x00\x00\x00\x00\x00",
	"\x00\x10\x10\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x10\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x10\x00",
	"\x00\x00\x00\x00\x00\x10\x10\x00",
	"\x00\x04\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x04\x00\x00\x00\x00\x00",
	"\x00\x04\x04\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x04\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x04\x00",
	"\x00\x00\x00\x00\x00\x04\x04\x00",
	"\x00\x01\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x01\x00\x00\x00\x00\x00",
	"\x00\x01\x01\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x01\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x01\x00",
	"\x00\x00\x00\x00\x00\x01\x01\x00"
};

void printBits(const std::vector<byte> &x) {
	for (byte bit : x) printf("%u", bit); printf("\n");
}

void printHex(const std::vector<byte> &x) {
	int nBits = x.size();
	if (nBits%4 != 0) {
		printf("Error in printHex: bits %% 4 != 0.\n");
	}
	int nBytes = nBits/4;
	for (int i=0; i<nBytes; i++) {
		int offset = i*4;
		byte out = 8*x[offset+0] + 4*x[offset+1] + 2*x[offset+2] + 1*x[offset+3];
		printf("%X",out);
	}
	printf("\n");
}

void printChars(const std::vector<byte> &x) {
	int nBits = x.size();
	if (nBits%8 != 0) {
		printf("Error in printChars: bits %% 8 != 0.\n");
	}
	int nChars = nBits/8;
	for (int i=0; i<nChars; i++) {
		int offset = i*8;
		byte out = 128*x[offset+0] + 64*x[offset+1] + 32*x[offset+2] + 16*x[offset+3] +
					8*x[offset+4] + 4*x[offset+5] + 2*x[offset+6] + 1*x[offset+7];
		if(isprint(out)) printf("%c",out);
		else printf(".");
	}
	printf("\n");
}

std::vector<byte> createBitArray(const char* buffer, int count) {
	std::vector<byte> out;
	out.reserve(count*8);
	for (int i = 0; i < count; i++) {
		byte b = buffer[i];
		for(int j=7; j>=0; j--){
			out.push_back((b & (1 << j)) != 0);
		}
	}
	return out;
}

std::vector<byte> createIntBitArray(int num, int bits) {
	std::vector<byte> out;
	out.reserve(bits);
	for(int i=bits-1; i>=0; i--) {
		out.push_back((num & (1 << i)) != 0);
	}
	return out;
}

std::vector<byte> createZerosArray(int n){
	std::vector<byte> out;
	out.reserve(n);
	for(int i=0; i<n; i++){
		out.push_back(0);
	}
	return out;
}

std::vector<byte> createOnesArray(int n){
	std::vector<byte> out;
	out.reserve(n);
	for(int i=0; i<n; i++){
		out.push_back(1);
	}
	return out;
}

std::vector<byte> createRandomArray(int n){
	std::vector<byte> out;
	out.reserve(n);
	for(int i=0; i<n; i++){
		out.push_back(rand()%2);
	}
	return out;
}

std::vector<byte> expand(const std::vector<byte> & input) {
	std::vector<byte> out;
	out.reserve(48);
	int emap[8][6] = {
		{31, 0, 1, 2, 3, 4},
		{3, 4, 5, 6, 7, 8},
		{7, 8, 9, 10, 11, 12},
		{11, 12, 13, 14, 15, 16},
		{15, 16, 17, 18, 19, 20},
		{19, 20, 21, 22, 23, 24},
		{23, 24, 25, 26, 27, 28},
		{27, 28, 29, 30, 31, 0}
	};
	for (int i = 0; i < 8; ++i)
		for (int j = 0; j < 6; ++j)
			out.push_back(input[emap[i][j]]);
	return out;
}

std::vector<byte> permutateChoice(const std::vector<byte> &input, const std::vector<int> &pos) {
	const int N = pos.size();
	std::vector<byte> output;
	output.reserve(N);
	for(int i=0; i<N; i++){
		output.push_back(input[pos[i]]);
	}
	return output;
}

std::vector<byte> xorOp(const std::vector<byte> &a, const std::vector<byte> &b) {
	const int N = a.size();
	std::vector<byte> output;
	output.reserve(N);
	for(int i=0; i<N; i++){
		output.push_back(a[i] ^ b[i]);
	}
	return output;
}

int eqOp(const std::vector<byte> &a, const std::vector<byte> &b) {
	const int na = a.size();
	const int nb = b.size();
	if(na!=nb) return 0;
	for(int i=0; i<na; i++){
		if(a[i]!=b[i]) return 0;
	}
	return 1;
}

std::vector<byte> leftShiftRotate(const std::vector<byte> &x, int k) {
	int n = x.size();
	int shift = k%n;
	std::vector<byte> out;
	out.reserve(n);
	for(int i=shift; i<n; i++){
		out.push_back(x[i]);
	}
	for(int i=0; i<shift; i++){
		out.push_back(x[i]);
	}
	return out;
}

std::vector<byte> join(const std::vector<byte> &a, const std::vector<byte> &b) {
	int na = a.size();
	int nb = b.size();
	std::vector<byte> out;
	out.reserve(na+nb);
	for(int i=0; i<na; i++) out.push_back(a[i]);
	for(int i=0; i<nb; i++) out.push_back(b[i]);
	return out;
}

std::vector<byte> repeat(const std::vector<byte> x, int num){
	int x_length = x.size();
	int N = x_length * num;
	std::vector<byte> out;
	out.reserve(N);
	for(int i=0; i<num; i++){
		for(int j=0; j<x_length; j++){
			out.push_back(x[j]);
		}
	}
	return out;
}

std::vector<byte> sbox(const std::vector<byte> &input, int sboxIndex) {
	std::vector<byte> output;
	output.reserve(4);
	byte input_val = 32*input[0] + 16*input[1] + 8*input[2] + 4*input[3] + 2*input[4] + input[5];
	byte output_val = sboxes[sboxIndex][input_val];
	byte mask = 1;
	for(int j=3; j>=0; j--){
		output.push_back((output_val & (mask << j)) != 0);
	}
	return output;
}

std::vector<std::vector<byte>> keySchedule(const std::vector<byte> &key) {
	int v[16] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};
	std::vector<int> PC1_C0{56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35}; // 28
	std::vector<int> PC1_D0{62, 54, 46, 38, 30, 22, 14, 6, 61, 55, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 27, 19, 11, 3}; // 28
	std::vector<int> PC2{13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9, 22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1, 40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31}; // 48
	std::vector<byte> C0 = permutateChoice(key,PC1_C0);
	std::vector<byte> D0 = permutateChoice(key,PC1_D0);
	std::vector<std::vector<byte>> keys;
	keys.reserve(16);
	for(int i=0; i<16; i++){
		std::vector<byte> C = leftShiftRotate(C0,v[i]);
		std::vector<byte> D = leftShiftRotate(D0,v[i]);
		std::vector<byte> T = join(C,D);
		keys[i] = permutateChoice(T,PC2);
		C0 = C;
		D0 = D;
	}
	return keys;
}

std::vector<byte> f(const std::vector<byte> &input, const std::vector<byte> &key) {
	std::vector<byte> output;
	output.reserve(32);
	std::vector<byte> x = xorOp(expand(input),key);
	for(int i=0; i<8; i++){
		std::vector<byte> x_slice = std::vector<byte>(x.begin()+i*6,x.begin()+i*6+6);
		std::vector<byte> y = sbox(x_slice,i);
		output.push_back(y[0]);
		output.push_back(y[1]);
		output.push_back(y[2]);
		output.push_back(y[3]);
	}
	return permutateChoice(output,Permut);
}

std::vector<byte> sboxAll(const std::vector<byte> &input) {
	std::vector<byte> output;
	output.reserve(32);
	for(int i=0; i<8; i++){
		std::vector<byte> x_slice = std::vector<byte>(input.begin()+i*6,input.begin()+i*6+6);
		std::vector<byte> y = sbox(x_slice,i);
		output.push_back(y[0]);
		output.push_back(y[1]);
		output.push_back(y[2]);
		output.push_back(y[3]);
	}
	return output;
}

std::vector<byte> encrypt(const std::vector<byte> &message, const std::vector<std::vector<byte>> &keys) {
	std::vector<byte> m = permutateChoice(message,IP);
	std::vector<byte> L, R;
	L.reserve(32);
	R.reserve(32);
	for(int i=0; i<numRounds; i++){
		L = std::vector<byte>(m.begin(),m.begin()+32);
		R = std::vector<byte>(m.begin()+32,m.begin()+64);
		std::vector<byte> oldR = R;
		R = xorOp(L,f(R,keys[i]));
		L = oldR;
		if(i!=numRounds-1) m = join(L,R);
	}
	m = join(R,L);
	m = permutateChoice(m,IPinv);
	return m;
}

std::vector<byte> decrypt(const std::vector<byte> &message, const std::vector<std::vector<byte>> &keys) {
	std::vector<byte> m = permutateChoice(message,IP);
	std::vector<byte> L, R;
	L.reserve(32);
	R.reserve(32);
	for(int i=numRounds-1; i>=0; i--){
		L = std::vector<byte>(m.begin(),m.begin()+32);
		R = std::vector<byte>(m.begin()+32,m.begin()+64);
		std::vector<byte> oldR = R;
		R = xorOp(L,f(R,keys[i]));
		L = oldR;
		if(i!=0) m = join(L,R);
	}
	m = join(R,L);
	m = permutateChoice(m,IPinv);
	return m;
}

std::vector<byte> partialEncrypt(const std::vector<byte> &message, const std::vector<std::vector<byte>> &keys) {
	std::vector<byte> m = permutateChoice(message,IP);
	std::vector<byte> L, R;
	L.reserve(32);
	R.reserve(32);
	for(int i=0; i<numRounds-2; i++){
		L = std::vector<byte>(m.begin(),m.begin()+32);
		R = std::vector<byte>(m.begin()+32,m.begin()+64);
		std::vector<byte> oldR = R;
		R = xorOp(L,f(R,keys[i]));
		L = oldR;
		if(i!=numRounds-3) m = join(L,R);
	}
	return R;
}

int numActivatedSBox(const std::vector<byte> &R){
	std::vector<byte> x = expand(R);
	int n=0;
	for(int i=0; i<8; i++){
		int used = 0;
		for(int j=0; j<6; j++) if(x[i*6+j]) used = 1;
		n += used;
	}
	return n;
}

int getDiffVal(int sbox_index, int dx, int dy){
	return diffs[sbox_index][dx*16+dy];
}

int getMaxDiffVal(int sbox_index, int dx){
	if(dx==0) return 64;
	int max = -1.0;
	for(int dy=0; dy<16; dy++){
		int val = getDiffVal(sbox_index,dx,dy);
		if(val > max) max = val;
	}
	return max;
}

struct Path{

	std::vector<byte> dr, dl, dx, dy;

	double getCost() const{
		double p = 1.0;
		for(int i=0; i<8; i++){
			int r = i*6;
			int s = i*4;
			auto dxit = dx.begin();
			std::vector<byte> bits = std::vector<byte>(dxit+r,dxit+r+6);
			int dx_val = 32*bits[0] + 16*bits[1] + 8*bits[2] + 4*bits[3] + 2*bits[4] + bits[5];
			auto dyit = dy.begin();
			bits = std::vector<byte>(dyit+s,dyit+s+4);
			int dy_val = 8*bits[0] + 4*bits[1] + 2*bits[2] + bits[3];
			p *= (double)getDiffVal(i,dx_val,dy_val)/64.0;
		}
		return -log2(p);
	}

};

struct Node {

	std::vector<Path> paths;
	std::vector<byte> next_dy;
	double g, h;

	bool operator<(const Node &other) const{
		return (g+h)<(other.g+other.h);
	}
	bool operator>(const Node &other) const{
		return (g+h)>(other.g+other.h);
	}

	void init(const std::vector<byte> &ptx){
		Path input;
		char zeros[] = "\x00\x00\x00\x00";
		std::vector<byte> u = permutateChoice(ptx,IP);
		input.dl = createBitArray(zeros,4);
		input.dr = std::vector<byte>(u.begin(),u.begin()+32);
		input.dx = expand(input.dr);
		input.dy = createBitArray(zeros,4);
		next_dy = input.dy;
		paths.push_back(input);
		g = 0;
	}

	void compute_h(){
		// out probability
		double p = 1.0;

		const int numLeftRounds = numRounds - paths.size() - 2;
		if(numLeftRounds){
			for(int i=0; i<8; i++){
				int r = i*6;
				auto iterator = paths.back().dx.begin();
				std::vector<byte> bits = std::vector<byte>(iterator+r,iterator+r+6);
				int input_val = 32*bits[0] + 16*bits[1] + 8*bits[2] + 4*bits[3] + 2*bits[4] + bits[5];
				p *= (double)getMaxDiffVal(i,input_val)/64.0;
			}
			for(int i=0; i<numLeftRounds-1; i++){
				p *= 0.25f;
			}
		}
		h = -log2(p);
	}

	int can_be_expanded(const std::vector<byte> &dx) const {
		std::vector<byte> mask;
		mask.reserve(32);
		std::vector<byte> zeros = createZerosArray(4);
		std::vector<byte> ones = createOnesArray(4);
		for(int i=0; i<8; i++){
			int present = 0;
			for(int j=0; j<6 && !present; j++){
				if(dx[i*6+j]) present = 1;
			}
			if(present) mask=join(mask,ones);
			else mask=join(mask,zeros);
		}
		for(int i=0; i<32; i++){
			if(mask[i] && !next_dy[i]) return 1;
		}
		return 0;
	}

	void increment_next_dy(const std::vector<byte> &dx){
		std::vector<byte> mask;
		mask.reserve(32);
		std::vector<byte> zeros = createZerosArray(4);
		std::vector<byte> ones = createOnesArray(4);
		for(int i=0; i<8; i++){
			int present = 0;
			for(int j=0; j<6 && !present; j++){
				if(dx[i*6+j]) present = 1;
			}
			if(present) mask=join(mask,ones);
			else mask=join(mask,zeros);
		}
		for(int i=31; i>=0; i--){
			if(mask[i]){
				if(!next_dy[i]){
					next_dy[i] = 1;
					return;
				}
				else{
					next_dy[i] = 0;
				}
			}
		}
		
	}

	void printInfo(int verbose=1) const{
		printf("\n*** NodeInfo ***\n");
		int p = paths.size();
		if(verbose){
			for(int i=0; i<p; i++){
				printf("Path %d\n",i);
				printf("  dl = "); printHex(paths[i].dl);
				printf("  dr = "); printHex(paths[i].dr);
				printf("  dx = "); printHex(paths[i].dx);
				printf("  dy = "); printHex(paths[i].dy);
			}
			//printf("next_dy = "); printHex(next_dy);
		}
		printf("g=%.2f, h=%.2f\n",g,h);
	}

};

void depthFirstSearch(std::vector<Node> &nodesList, Node &bestSolution){
	Node &n = nodesList.back();
	//n.printInfo();
	const int numLeftRounds = numRounds - n.paths.size() - 2;
	if(numLeftRounds==0){
		// complete solution, pop
		//printf("\nSOLUTION\n\n");
		if(n<bestSolution) bestSolution = n;
		nodesList.pop_back();
		return;
	}
	// incomplete solution
	if(n.can_be_expanded(n.paths.back().dx)){
		// expand
		//printf("\nEXPAND\n\n");
		Node next_node = n;
		next_node.paths.back().dy = n.next_dy;
		Path new_path;
		Path last_path = next_node.paths.back();
		new_path.dl = last_path.dr;
		new_path.dr = xorOp(last_path.dl,permutateChoice(last_path.dy,Permut));
		new_path.dx = expand(new_path.dr);
		next_node.paths.push_back(new_path);
		next_node.g += last_path.getCost();
		next_node.next_dy = createZerosArray(32);
		n.increment_next_dy(n.paths.back().dx);
		if(next_node.g < std::numeric_limits<double>::max()){
			next_node.compute_h();
			if(next_node<bestSolution){
				nodesList.push_back(next_node);
			}
		}
		return;
	}
	// pop
	//printf("\nPOP\n\n");
	nodesList.pop_back();
}

int main()
{
	
	//srand(time(NULL));

	char key_chars[] = "\x01\x23\x45\x67\x89\xAB\xCD\xEF";
	std::vector<byte> key = createBitArray(key_chars, 8);
	std::vector<std::vector<byte>> keys = keySchedule(key);	
	
	Node bestSolution;
	bestSolution.g = MAXFLOAT;
	bestSolution.h = 0;
	std::vector<Node> nodesList;

	for(int i=0; i<24; i++){
		std::vector<byte> m = createBitArray((char*)dL[i], 8);
		Node n;
		n.init(m);
		n.compute_h();
		nodesList.push_back(n);
	}

	int i=0;
	while(nodesList.size()>0){
		if(i%100000==0) bestSolution.printInfo(0);
		depthFirstSearch(nodesList,bestSolution);
		if(bestSolution.g<17.13) break;
		i++;
	}
	bestSolution.printInfo();

	std::vector<byte> dxr = bestSolution.paths.front().dr;
	std::vector<byte> dx = permutateChoice(join(dxr,createZerosArray(32)),IPinv);
	std::vector<byte> dz = bestSolution.paths.back().dr;
	double p = 1.0/pow(2,bestSolution.g);

	//std::vector<byte> dx = createBitArray("\x00\x01\x01\x00\x00\x00\x00\x00",8);
	//std::vector<byte> dz = createBitArray("\x08\x20\x84\x09",4);
	//double p = 1.0/pow(2,17.12);

	printf("\ndx = "); printHex(dx);
	printf("dz = "); printHex(dz);
	printf("p = %f\n\n",p);

	/*
	// VERIFY EXPECTED PROBABILITY
	int count = 0;
	int n = 1000000;

	for(int i=0; i<n; i++){
		std::vector<byte> x1 = createRandomArray(64);
		std::vector<byte> x2 = xorOp(x1,dx);
		std::vector<byte> z1 = partialEncrypt(x1,keys);
		std::vector<byte> z2 = partialEncrypt(x2,keys);
		std::vector<byte> real_dz = xorOp(z1,z2);
		if(eqOp(dz,real_dz)) count++;
	}

	printf("count = %d, n = %d\np = %f\n",count,n,(double)count/(double)n);
	return 0;
	*/

	int counters[64];
	for(int i=0; i<64; i++) counters[i] = 0;

	int n = (double)2.0*(double)1.0/p;
	for(int i=0; i<n; i++){
		std::vector<byte> x1 = createRandomArray(64);
		std::vector<byte> x2 = xorOp(x1,dx);
		std::vector<byte> ctx1 = encrypt(x1,keys);
		std::vector<byte> ctx2 = encrypt(x2,keys);
		std::vector<byte> d1 = permutateChoice(ctx1,IP);
		std::vector<byte> d2 = permutateChoice(ctx2,IP);
		std::vector<byte> d = xorOp(d1,d2);
		std::vector<byte> dh = std::vector<byte>(d.begin(),d.begin()+32);

		std::vector<byte> dleft = permutateChoice(xorOp(dz,dh),PermutInv);
		std::vector<byte> c1 = std::vector<byte>(d1.begin()+32,d1.begin()+64);
		std::vector<byte> c2 = std::vector<byte>(d2.begin()+32,d2.begin()+64);
		std::vector<byte> e1 = expand(c1);
		std::vector<byte> e2 = expand(c2);

		for(int j=0; j<64; j++){
			std::vector<byte> subkey = createIntBitArray(j,6);
			std::vector<byte> key_j = repeat(subkey,8);
			std::vector<byte> right1 = sboxAll(xorOp(e1,key_j));
			std::vector<byte> right2 = sboxAll(xorOp(e2,key_j));
			std::vector<byte> dright = xorOp(right1,right2);
			//for(int k=0; k<8; k++){
			// FOR NOW TEST ONE PARTIAL SUBKEY
			std::vector<byte> dleft_k = std::vector<byte>(dleft.begin()+20,dleft.begin()+24);
			std::vector<byte> dright_k = std::vector<byte>(dright.begin()+20,dright.begin()+24);
			if(eqOp(dleft_k,dright_k)) counters[j]+=1;
			//}
		}
	}

	printBits(std::vector<byte>(keys[numRounds-1].begin()+30,keys[numRounds-1].begin()+36));

	for(int j=0; j<64; j++){
		double q = (double)counters[j]/(double)n;
		printf("key = %d, p = %f (%d/%d)\n",j,q,counters[j],n);
	}

	// DES
	/*
	char message_chars[] = "\x01\x23\x45\x67\x89\xAB\xCD\xEF";
	std::vector<byte> m = createBitArray(message_chars, 8);

	printf("Key:     "); printHex(key);
	printf("         "); printChars(key);

	printf("Message: "); printHex(m);
	printf("         "); printChars(m);

	m=encrypt(m,keys);
	//m=decrypt(m,keys);

	printf("Output:  "); printHex(m);
	printf("         "); printChars(m);
	*/

	/*
	// dX_R sequences that activate just 1 sbox in F1
	char level1_chars[] = "\x02\x04\x06\x20\x40\x60";
	for(int i=0; i<4; i++){
		for(int j=0; j<6; j++){
			char chars[] = "\x00\x00\x00\x00";
			char chars0[] = "\x00\x00\x00\x00";
			chars[i] = level1_chars[j];
			Array<ubyte> m = createBitArray(chars, 4);

			Array<ubyte> n = createBitArray(chars0,4);
			Array<ubyte> x = join(m,n);
			x = permutateChoice(x,IPinv);
			printHex(x);
		}
	}
	*/

	return 0;
}
