#include "coremin.h"
#include "math/math.h"
#include "containers/sorting.h"

const uint32 numRounds = 6;

Malloc * gMalloc = nullptr;

#include <omp.h>
double start;

const uint32 ip[] = {
	57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
	61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7,
	56, 48, 40, 32, 24, 16, 8, 0, 58, 50, 42, 34, 26, 18, 10, 2,
	60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6
};
const uint32 fp[] = {
	39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30,
	37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28,
	35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26,
	33, 1, 41, 9, 49, 17, 57, 25, 32, 0, 40, 8, 48, 16, 56, 24
};
const uint32 xpn[] = {
	31, 0, 1, 2, 3, 4,
	3, 4, 5, 6, 7, 8,
	7, 8, 9, 10, 11, 12,
	11, 12, 13, 14, 15, 16,
	15, 16, 17, 18, 19, 20,
	19, 20, 21, 22, 23, 24,
	23, 24, 25, 26, 27, 28,
	27, 28, 29, 30, 31, 0
};
const uint32 perm[] = {
	15, 6, 19, 20,
	28, 11, 27, 16,
	0, 14, 22, 25,
	4, 17, 30, 9,
	1, 7, 23, 13,
	31, 26, 2, 8,
	18, 12, 29, 5,
	21, 10, 3, 24
};
const uint32 invPerm[] = {
	8, 16, 22, 30,
	12, 27, 1, 17,
	23, 15, 29, 5,
	25, 19, 9, 0,
	7, 13, 24, 2,
	3, 28, 10, 18,
	31, 11, 21, 6,
	4, 26, 14, 20
};
const uint32 subs[8][64] = {
	{
		14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
		3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
		4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
		15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13
	},
	{
		15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
		9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
		0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
		5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9
	},
	{
		10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
		1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
		13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
		11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12
	},
	{
		7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
		1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
		10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
		15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14
	},
	{
		2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
		8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
		4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
		15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3
	},
	{
		12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
		0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
		9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
		7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13
	},
	{
		4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
		3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
		1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
		10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12
	},
	{
		13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
		10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
		7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
		0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
	}
};
const uint32 diffs[8][16 * 64] = {
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6, 0, 2, 4, 4, 0, 10, 12, 4, 10, 6, 2, 4,
		0, 0, 0, 8, 0, 4, 4, 4, 0, 6, 8, 6, 12, 6, 4, 2,
		14, 4, 2, 2, 10, 6, 4, 2, 6, 4, 4, 0, 2, 2, 2, 0,
		0, 0, 0, 6, 0, 10, 10, 6, 0, 4, 6, 4, 2, 8, 6, 2,
		4, 8, 6, 2, 2, 4, 4, 2, 0, 4, 4, 0, 12, 2, 4, 6,
		0, 4, 2, 4, 8, 2, 6, 2, 8, 4, 4, 2, 4, 2, 0, 12,
		2, 4, 10, 4, 0, 4, 8, 4, 2, 4, 8, 2, 2, 2, 4, 4,
		0, 0, 0, 12, 0, 8, 8, 4, 0, 6, 2, 8, 8, 2, 2, 4,
		10, 2, 4, 0, 2, 4, 6, 0, 2, 2, 8, 0, 10, 0, 2, 12,
		0, 8, 6, 2, 2, 8, 6, 0, 6, 4, 6, 0, 4, 0, 2, 10,
		2, 4, 0, 10, 2, 2, 4, 0, 2, 6, 2, 6, 6, 4, 2, 12,
		0, 0, 0, 8, 0, 6, 6, 0, 0, 6, 6, 4, 6, 6, 14, 2,
		6, 6, 4, 8, 4, 8, 2, 6, 0, 6, 4, 6, 0, 2, 0, 2,
		0, 4, 8, 8, 6, 6, 4, 0, 6, 6, 4, 0, 0, 4, 0, 8,
		2, 0, 2, 4, 4, 6, 4, 2, 4, 8, 2, 2, 2, 6, 8, 8,
		0, 0, 0, 0, 0, 0, 2, 14, 0, 6, 6, 12, 4, 6, 8, 6,
		6, 8, 2, 4, 6, 4, 8, 6, 4, 0, 6, 6, 0, 4, 0, 0,
		0, 8, 4, 2, 6, 6, 4, 6, 6, 4, 2, 6, 6, 0, 4, 0,
		2, 4, 4, 6, 2, 0, 4, 6, 2, 0, 6, 8, 4, 6, 4, 6,
		0, 8, 8, 0, 10, 0, 4, 2, 8, 2, 2, 4, 4, 8, 4, 0,
		0, 4, 6, 4, 2, 2, 4, 10, 6, 2, 0, 10, 0, 4, 6, 4,
		0, 8, 10, 8, 0, 2, 2, 6, 10, 2, 0, 2, 0, 6, 2, 6,
		4, 4, 6, 0, 10, 6, 0, 2, 4, 4, 4, 6, 6, 6, 2, 0,
		0, 6, 6, 0, 8, 4, 2, 2, 2, 4, 6, 8, 6, 6, 2, 2,
		2, 6, 2, 4, 0, 8, 4, 6, 10, 4, 0, 4, 2, 8, 4, 0,
		0, 6, 4, 0, 4, 6, 6, 6, 6, 2, 2, 0, 4, 4, 6, 8,
		4, 4, 2, 4, 10, 6, 6, 4, 6, 2, 2, 4, 2, 2, 4, 2,
		0, 10, 10, 6, 6, 0, 0, 12, 6, 4, 0, 0, 2, 4, 4, 0,
		4, 2, 4, 0, 8, 0, 0, 2, 10, 0, 2, 6, 6, 6, 14, 0,
		0, 2, 6, 0, 14, 2, 0, 0, 6, 4, 10, 8, 2, 2, 6, 2,
		2, 4, 10, 6, 2, 2, 2, 8, 6, 8, 0, 0, 0, 4, 6, 4,
		0, 0, 0, 10, 0, 12, 8, 2, 0, 6, 4, 4, 4, 2, 0, 12,
		0, 4, 2, 4, 4, 8, 10, 0, 4, 4, 10, 0, 4, 0, 2, 8,
		10, 4, 6, 2, 2, 8, 2, 2, 2, 2, 6, 0, 4, 0, 4, 10,
		0, 4, 4, 8, 0, 2, 6, 0, 6, 6, 2, 10, 2, 4, 0, 10,
		12, 0, 0, 2, 2, 2, 2, 0, 14, 14, 2, 0, 2, 6, 2, 4,
		6, 4, 4, 12, 4, 4, 4, 10, 2, 2, 2, 0, 4, 2, 2, 2,
		0, 0, 4, 10, 10, 10, 2, 4, 0, 4, 6, 4, 4, 4, 2, 0,
		10, 4, 2, 0, 2, 4, 2, 0, 4, 8, 0, 4, 8, 8, 4, 4,
		12, 2, 2, 8, 2, 6, 12, 0, 0, 2, 6, 0, 4, 0, 6, 2,
		4, 2, 2, 10, 0, 2, 4, 0, 0, 14, 10, 2, 4, 6, 0, 4,
		4, 2, 4, 6, 0, 2, 8, 2, 2, 14, 2, 6, 2, 6, 2, 2,
		12, 2, 2, 2, 4, 6, 6, 2, 0, 2, 6, 2, 6, 0, 8, 4,
		4, 2, 2, 4, 0, 2, 10, 4, 2, 2, 4, 8, 8, 4, 2, 6,
		6, 2, 6, 2, 8, 4, 4, 4, 2, 4, 6, 0, 8, 2, 0, 6,
		6, 6, 2, 2, 0, 2, 4, 6, 4, 0, 6, 2, 12, 2, 6, 4,
		2, 2, 2, 2, 2, 6, 8, 8, 2, 4, 4, 6, 8, 2, 4, 2,
		0, 4, 6, 0, 12, 6, 2, 2, 8, 2, 4, 4, 6, 2, 2, 4,
		4, 8, 2, 10, 2, 2, 2, 2, 6, 0, 0, 2, 2, 4, 10, 8,
		4, 2, 6, 4, 4, 2, 2, 4, 6, 6, 4, 8, 2, 2, 8, 0,
		4, 4, 6, 2, 10, 8, 4, 2, 4, 0, 2, 2, 4, 6, 2, 4,
		0, 8, 16, 6, 2, 0, 0, 12, 6, 0, 0, 0, 0, 8, 0, 6,
		2, 2, 4, 0, 8, 0, 0, 0, 14, 4, 6, 8, 0, 2, 14, 0,
		2, 6, 2, 2, 8, 0, 2, 2, 4, 2, 6, 8, 6, 4, 10, 0,
		2, 2, 12, 4, 2, 4, 4, 10, 4, 4, 2, 6, 0, 2, 2, 4,
		0, 6, 2, 2, 2, 0, 2, 2, 4, 6, 4, 4, 4, 6, 10, 10,
		6, 2, 2, 4, 12, 6, 4, 8, 4, 0, 2, 4, 2, 4, 4, 0,
		6, 4, 6, 4, 6, 8, 0, 6, 2, 2, 6, 2, 2, 6, 4, 0,
		2, 6, 4, 0, 0, 2, 4, 6, 4, 6, 8, 6, 4, 4, 6, 2,
		0, 10, 4, 0, 12, 0, 4, 2, 6, 0, 4, 12, 4, 4, 2, 0,
		0, 8, 6, 2, 2, 6, 0, 8, 4, 4, 0, 4, 0, 12, 4, 4,
		4, 8, 2, 2, 2, 4, 4, 14, 4, 2, 0, 2, 0, 8, 4, 4,
		4, 8, 4, 2, 4, 0, 2, 4, 4, 2, 4, 8, 8, 6, 2, 2
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 4, 0, 2, 6, 4, 0, 14, 8, 6, 8, 4, 6, 2,
		0, 0, 0, 2, 0, 4, 6, 4, 0, 0, 4, 6, 10, 10, 12, 6,
		4, 8, 4, 8, 4, 6, 4, 2, 4, 2, 2, 4, 6, 2, 0, 4,
		0, 0, 0, 0, 0, 6, 0, 14, 0, 6, 10, 4, 10, 6, 4, 4,
		2, 0, 4, 8, 2, 4, 6, 6, 2, 0, 8, 4, 2, 4, 10, 2,
		0, 12, 6, 4, 6, 4, 6, 2, 2, 10, 2, 8, 2, 0, 0, 0,
		4, 6, 6, 4, 2, 4, 4, 2, 6, 4, 2, 4, 4, 6, 0, 6,
		0, 0, 0, 4, 0, 4, 0, 8, 0, 10, 16, 6, 6, 0, 6, 4,
		14, 2, 4, 10, 2, 8, 2, 6, 2, 4, 0, 0, 2, 2, 2, 4,
		0, 6, 6, 2, 10, 4, 10, 2, 6, 2, 2, 4, 2, 2, 4, 2,
		6, 2, 2, 0, 2, 4, 6, 2, 10, 2, 0, 6, 6, 4, 4, 8,
		0, 0, 0, 4, 0, 14, 0, 10, 0, 6, 2, 4, 4, 8, 6, 6,
		6, 2, 6, 2, 10, 2, 0, 4, 0, 10, 4, 2, 8, 2, 2, 4,
		0, 6, 12, 8, 0, 4, 2, 0, 8, 2, 4, 4, 6, 2, 0, 6,
		0, 8, 2, 0, 6, 6, 8, 2, 4, 4, 4, 6, 8, 0, 4, 2,
		0, 0, 0, 8, 0, 4, 10, 2, 0, 2, 8, 10, 0, 10, 6, 4,
		6, 6, 4, 6, 4, 0, 6, 4, 8, 2, 10, 2, 2, 4, 0, 0,
		0, 6, 2, 6, 2, 4, 12, 4, 6, 4, 0, 4, 4, 6, 2, 2,
		4, 0, 4, 0, 8, 6, 6, 0, 0, 2, 0, 6, 4, 8, 2, 14,
		0, 6, 6, 4, 10, 0, 2, 12, 6, 2, 2, 2, 4, 4, 2, 2,
		6, 8, 2, 0, 8, 2, 0, 2, 2, 2, 2, 2, 2, 14, 10, 2,
		0, 8, 6, 4, 2, 2, 4, 2, 6, 4, 6, 2, 6, 0, 6, 6,
		6, 4, 8, 6, 4, 4, 0, 4, 6, 2, 4, 4, 4, 2, 4, 2,
		0, 6, 4, 6, 10, 4, 0, 2, 4, 8, 0, 0, 4, 8, 2, 6,
		2, 4, 6, 4, 4, 2, 4, 2, 6, 4, 6, 8, 0, 6, 4, 2,
		0, 6, 8, 4, 2, 4, 2, 2, 8, 2, 2, 6, 2, 4, 4, 8,
		0, 6, 4, 4, 0, 12, 6, 4, 2, 2, 2, 4, 4, 2, 10, 2,
		0, 4, 6, 6, 12, 0, 4, 0, 10, 2, 6, 2, 0, 0, 10, 2,
		0, 6, 2, 2, 6, 0, 4, 16, 4, 4, 2, 0, 0, 4, 6, 8,
		0, 4, 8, 2, 10, 6, 6, 0, 8, 4, 0, 2, 4, 4, 0, 6,
		4, 2, 6, 6, 2, 2, 2, 4, 8, 6, 10, 6, 4, 0, 0, 2,
		0, 0, 0, 2, 0, 12, 10, 4, 0, 0, 0, 2, 14, 2, 8, 10,
		0, 4, 6, 8, 2, 10, 4, 2, 2, 6, 4, 2, 6, 2, 0, 6,
		4, 12, 8, 4, 2, 2, 0, 0, 2, 8, 8, 6, 0, 6, 0, 2,
		8, 2, 0, 2, 8, 4, 2, 6, 4, 8, 2, 2, 6, 4, 2, 4,
		10, 4, 0, 0, 0, 4, 0, 2, 6, 8, 6, 10, 8, 0, 2, 4,
		6, 0, 12, 2, 8, 6, 10, 0, 0, 8, 2, 6, 0, 0, 2, 2,
		2, 2, 4, 4, 2, 2, 10, 14, 2, 0, 4, 2, 2, 4, 6, 4,
		6, 0, 0, 2, 6, 4, 2, 4, 4, 4, 8, 4, 8, 0, 6, 6,
		8, 0, 8, 2, 4, 12, 2, 0, 2, 6, 2, 0, 6, 2, 0, 10,
		0, 2, 4, 10, 2, 8, 6, 4, 0, 10, 0, 2, 10, 0, 2, 4,
		4, 0, 4, 8, 6, 2, 4, 4, 6, 6, 2, 6, 2, 2, 4, 4,
		2, 2, 6, 4, 0, 2, 2, 6, 2, 8, 8, 4, 4, 4, 8, 2,
		10, 6, 8, 6, 0, 6, 4, 4, 4, 2, 4, 4, 0, 0, 2, 4,
		2, 2, 2, 4, 0, 0, 0, 2, 8, 4, 4, 6, 10, 2, 14, 4,
		2, 4, 0, 2, 10, 4, 2, 0, 2, 2, 6, 2, 8, 8, 10, 2,
		12, 4, 6, 8, 2, 6, 2, 8, 0, 4, 0, 2, 0, 8, 2, 0,
		0, 4, 0, 2, 4, 4, 8, 6, 10, 6, 2, 12, 0, 0, 0, 6,
		0, 10, 2, 0, 6, 2, 10, 2, 6, 0, 2, 0, 6, 6, 4, 8,
		8, 4, 6, 0, 6, 4, 4, 8, 4, 6, 8, 0, 2, 2, 2, 0,
		2, 2, 6, 10, 2, 0, 0, 6, 4, 4, 12, 8, 4, 2, 2, 0,
		0, 12, 6, 4, 6, 0, 4, 4, 4, 0, 4, 6, 4, 2, 4, 4,
		0, 12, 4, 6, 2, 4, 4, 0, 10, 0, 0, 8, 0, 8, 0, 6,
		8, 2, 4, 0, 4, 0, 4, 2, 0, 8, 4, 2, 6, 16, 2, 2,
		6, 2, 2, 2, 6, 6, 4, 8, 2, 2, 6, 2, 2, 2, 4, 8,
		0, 8, 8, 10, 6, 2, 2, 0, 4, 0, 4, 2, 4, 0, 4, 10,
		0, 2, 0, 0, 8, 0, 10, 4, 10, 0, 8, 4, 4, 4, 4, 6,
		4, 0, 2, 8, 4, 2, 2, 2, 4, 8, 2, 0, 4, 10, 10, 2,
		16, 4, 4, 2, 8, 2, 2, 6, 4, 4, 4, 2, 0, 2, 2, 2,
		0, 2, 6, 2, 8, 4, 6, 0, 10, 2, 2, 4, 4, 10, 4, 0,
		0, 16, 10, 2, 4, 2, 4, 2, 8, 0, 0, 8, 0, 6, 2, 0,
		4, 4, 0, 10, 2, 4, 2, 14, 4, 2, 6, 6, 0, 0, 6, 0,
		4, 0, 0, 2, 0, 8, 2, 4, 0, 2, 4, 4, 4, 14, 10, 6
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 2, 0, 4, 2, 12, 0, 14, 0, 4, 8, 2, 6, 10,
		0, 0, 0, 2, 0, 2, 0, 8, 0, 4, 12, 10, 4, 6, 8, 8,
		8, 6, 10, 4, 8, 6, 0, 6, 4, 4, 0, 0, 0, 4, 2, 2,
		0, 0, 0, 4, 0, 2, 4, 2, 0, 12, 8, 4, 6, 8, 10, 4,
		6, 2, 4, 8, 6, 10, 6, 2, 2, 8, 2, 0, 2, 0, 4, 2,
		0, 10, 6, 6, 10, 0, 4, 12, 2, 4, 0, 0, 6, 4, 0, 0,
		2, 0, 0, 4, 4, 4, 4, 2, 10, 4, 4, 8, 4, 4, 4, 6,
		0, 0, 0, 10, 0, 4, 4, 6, 0, 6, 6, 6, 6, 0, 8, 8,
		10, 2, 0, 2, 10, 4, 6, 2, 0, 6, 0, 4, 6, 2, 4, 6,
		0, 10, 6, 0, 14, 6, 4, 0, 4, 6, 6, 0, 4, 0, 2, 2,
		2, 6, 2, 10, 2, 2, 4, 0, 4, 2, 6, 0, 2, 8, 14, 0,
		0, 0, 0, 8, 0, 12, 12, 4, 0, 8, 0, 4, 2, 10, 2, 2,
		8, 2, 8, 0, 0, 4, 2, 0, 2, 8, 14, 2, 6, 2, 4, 2,
		0, 4, 4, 2, 4, 2, 4, 4, 10, 4, 4, 4, 4, 4, 2, 8,
		4, 6, 4, 6, 2, 2, 4, 8, 6, 2, 6, 2, 0, 6, 2, 4,
		0, 0, 0, 4, 0, 12, 4, 8, 0, 4, 2, 6, 2, 14, 0, 8,
		8, 2, 2, 6, 4, 0, 2, 0, 8, 4, 12, 2, 10, 0, 2, 2,
		0, 2, 8, 2, 4, 8, 0, 8, 8, 0, 2, 2, 4, 2, 14, 0,
		4, 4, 12, 0, 2, 2, 2, 10, 2, 2, 2, 2, 4, 4, 4, 8,
		0, 6, 4, 4, 6, 4, 6, 2, 8, 6, 6, 2, 2, 0, 0, 8,
		4, 8, 2, 8, 2, 4, 8, 0, 4, 2, 2, 2, 2, 6, 8, 2,
		0, 6, 10, 2, 8, 4, 2, 0, 2, 2, 2, 8, 4, 6, 4, 4,
		0, 6, 6, 0, 6, 2, 4, 4, 6, 2, 2, 10, 6, 8, 2, 0,
		0, 8, 4, 6, 6, 0, 6, 2, 4, 0, 4, 2, 10, 0, 6, 6,
		4, 2, 4, 8, 4, 2, 10, 2, 2, 2, 6, 8, 2, 6, 0, 2,
		0, 8, 6, 4, 4, 0, 6, 4, 4, 8, 0, 10, 2, 2, 2, 4,
		4, 10, 2, 0, 2, 4, 2, 4, 8, 2, 2, 8, 4, 2, 8, 2,
		0, 6, 8, 8, 4, 2, 8, 0, 12, 0, 10, 0, 4, 0, 2, 0,
		0, 2, 0, 6, 2, 8, 4, 6, 2, 0, 4, 2, 4, 10, 0, 14,
		0, 4, 8, 2, 4, 6, 0, 4, 10, 0, 2, 6, 4, 8, 4, 2,
		0, 6, 8, 0, 10, 6, 4, 6, 4, 2, 2, 10, 4, 0, 0, 2,
		0, 0, 0, 0, 0, 4, 4, 8, 0, 2, 2, 4, 10, 16, 12, 2,
		10, 8, 8, 0, 8, 4, 2, 4, 0, 6, 6, 6, 0, 0, 2, 0,
		12, 6, 4, 4, 2, 4, 10, 2, 0, 4, 4, 2, 4, 4, 0, 2,
		2, 2, 0, 6, 0, 2, 4, 0, 4, 12, 4, 2, 6, 4, 8, 8,
		4, 8, 2, 12, 6, 4, 2, 10, 2, 2, 2, 4, 2, 0, 4, 0,
		6, 0, 2, 0, 8, 2, 0, 2, 8, 8, 2, 2, 4, 4, 10, 6,
		6, 2, 0, 4, 4, 0, 4, 0, 4, 2, 14, 0, 8, 10, 0, 6,
		0, 2, 4, 16, 8, 6, 6, 6, 0, 2, 4, 4, 0, 2, 2, 2,
		6, 2, 10, 0, 6, 4, 0, 4, 4, 2, 4, 8, 2, 2, 8, 2,
		0, 2, 8, 4, 0, 4, 0, 6, 4, 10, 4, 8, 4, 4, 4, 2,
		2, 6, 0, 4, 2, 4, 4, 6, 4, 8, 4, 4, 4, 2, 4, 6,
		10, 2, 6, 6, 4, 4, 8, 0, 4, 2, 2, 0, 2, 4, 4, 6,
		10, 4, 6, 2, 4, 2, 2, 2, 4, 10, 4, 4, 0, 2, 6, 2,
		4, 2, 4, 4, 4, 2, 4, 16, 2, 0, 0, 4, 4, 2, 6, 6,
		4, 0, 2, 10, 0, 6, 10, 4, 2, 6, 6, 2, 2, 0, 2, 8,
		8, 2, 0, 0, 4, 4, 4, 2, 6, 4, 6, 2, 4, 8, 4, 6,
		0, 10, 8, 6, 2, 0, 4, 2, 10, 4, 4, 6, 2, 0, 6, 0,
		2, 6, 2, 0, 4, 2, 8, 8, 2, 2, 2, 0, 2, 12, 6, 6,
		2, 0, 4, 8, 2, 8, 4, 4, 8, 4, 2, 8, 6, 2, 0, 2,
		4, 4, 6, 8, 6, 6, 0, 2, 2, 2, 6, 4, 12, 0, 0, 2,
		0, 6, 2, 2, 16, 2, 2, 2, 12, 2, 4, 0, 4, 2, 0, 8,
		4, 6, 0, 10, 8, 0, 2, 2, 6, 0, 0, 6, 2, 10, 2, 6,
		4, 4, 4, 4, 0, 6, 6, 4, 4, 4, 4, 4, 0, 6, 2, 8,
		4, 8, 2, 4, 2, 2, 6, 0, 2, 4, 8, 4, 10, 0, 6, 2,
		0, 8, 12, 0, 2, 2, 6, 6, 2, 10, 2, 2, 0, 8, 0, 4,
		2, 6, 4, 0, 6, 4, 6, 4, 8, 0, 4, 4, 2, 4, 8, 2,
		6, 0, 2, 2, 4, 6, 4, 4, 4, 2, 2, 6, 12, 2, 6, 2,
		2, 2, 6, 0, 0, 10, 4, 8, 4, 2, 4, 8, 4, 4, 0, 6,
		0, 2, 4, 2, 12, 2, 0, 6, 2, 0, 2, 8, 4, 6, 4, 10,
		4, 6, 8, 6, 2, 2, 2, 2, 10, 2, 6, 6, 2, 4, 2, 0,
		8, 6, 4, 4, 2, 10, 2, 0, 2, 2, 4, 2, 4, 2, 10, 2,
		2, 6, 4, 0, 0, 10, 8, 2, 2, 8, 6, 4, 6, 2, 0, 4
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 16, 16, 0, 0, 16, 16, 0, 0, 0, 0, 0,
		0, 0, 0, 8, 0, 4, 4, 8, 0, 4, 4, 8, 8, 8, 8, 0,
		8, 6, 2, 0, 2, 4, 8, 2, 6, 0, 4, 6, 0, 6, 2, 8,
		0, 0, 0, 8, 0, 0, 12, 4, 0, 12, 0, 4, 8, 4, 4, 8,
		4, 2, 2, 8, 2, 12, 0, 2, 2, 0, 12, 2, 8, 2, 2, 4,
		0, 8, 8, 4, 8, 8, 0, 0, 8, 0, 8, 0, 4, 0, 0, 8,
		4, 2, 6, 4, 6, 0, 16, 6, 2, 0, 0, 2, 4, 2, 6, 4,
		0, 0, 0, 4, 0, 8, 4, 8, 0, 4, 8, 8, 4, 8, 8, 0,
		8, 4, 4, 4, 4, 0, 8, 4, 4, 0, 0, 4, 4, 4, 4, 8,
		0, 6, 6, 0, 6, 4, 4, 6, 6, 4, 4, 6, 0, 6, 6, 0,
		0, 12, 0, 8, 0, 0, 0, 0, 12, 0, 0, 12, 8, 12, 0, 0,
		0, 0, 0, 4, 0, 8, 4, 8, 0, 4, 8, 8, 4, 8, 8, 0,
		8, 4, 4, 4, 4, 0, 0, 4, 4, 8, 0, 4, 4, 4, 4, 8,
		0, 6, 6, 4, 6, 0, 4, 6, 6, 4, 0, 6, 4, 6, 6, 0,
		0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
		0, 0, 0, 0, 0, 8, 12, 4, 0, 12, 8, 4, 0, 4, 4, 8,
		4, 2, 2, 16, 2, 4, 0, 2, 2, 0, 4, 2, 16, 2, 2, 4,
		0, 0, 0, 8, 0, 4, 4, 8, 0, 4, 4, 8, 8, 8, 8, 0,
		8, 2, 6, 0, 6, 4, 0, 6, 2, 8, 4, 2, 0, 2, 6, 8,
		0, 8, 8, 0, 8, 0, 8, 0, 8, 8, 0, 0, 0, 0, 0, 16,
		8, 4, 4, 0, 4, 8, 0, 4, 4, 0, 8, 4, 0, 4, 4, 8,
		0, 8, 8, 4, 8, 8, 0, 0, 8, 0, 8, 0, 4, 0, 0, 8,
		4, 6, 2, 4, 2, 0, 0, 2, 6, 16, 0, 6, 4, 6, 2, 4,
		0, 8, 8, 8, 8, 4, 0, 0, 8, 0, 4, 0, 8, 0, 0, 8,
		4, 4, 4, 0, 4, 4, 16, 4, 4, 0, 4, 4, 0, 4, 4, 4,
		0, 6, 6, 4, 6, 0, 4, 6, 6, 4, 0, 6, 4, 6, 6, 0,
		0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
		0, 8, 8, 8, 8, 4, 0, 0, 8, 0, 4, 0, 8, 0, 0, 8,
		4, 4, 4, 0, 4, 4, 0, 4, 4, 16, 4, 4, 0, 4, 4, 4,
		0, 6, 6, 0, 6, 4, 4, 6, 6, 4, 4, 6, 0, 6, 6, 0,
		0, 0, 12, 8, 12, 0, 0, 12, 0, 0, 0, 0, 8, 0, 12, 0,
		0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 12, 8, 12, 12, 0,
		0, 4, 8, 0, 8, 4, 8, 8, 4, 0, 4, 4, 0, 4, 8, 0,
		8, 2, 2, 0, 2, 4, 8, 6, 2, 8, 4, 6, 0, 6, 6, 0,
		4, 6, 2, 8, 2, 4, 0, 2, 6, 0, 4, 6, 8, 6, 2, 4,
		0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
		0, 8, 4, 4, 4, 0, 0, 4, 8, 8, 0, 8, 4, 8, 4, 0,
		0, 6, 6, 0, 6, 4, 8, 2, 6, 8, 4, 2, 0, 2, 2, 8,
		4, 6, 2, 8, 2, 4, 0, 2, 6, 0, 4, 6, 8, 6, 2, 4,
		16, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0,
		0, 6, 2, 8, 2, 4, 0, 2, 6, 8, 4, 6, 8, 6, 2, 0,
		0, 2, 2, 16, 2, 4, 4, 2, 2, 4, 4, 2, 16, 2, 2, 0,
		8, 0, 4, 0, 4, 8, 16, 4, 0, 0, 8, 0, 0, 0, 4, 8,
		8, 4, 4, 4, 4, 0, 8, 4, 4, 8, 0, 4, 4, 4, 4, 0,
		4, 2, 6, 4, 6, 8, 0, 6, 2, 0, 8, 2, 4, 2, 6, 4,
		16, 0, 0, 0, 0, 16, 0, 0, 0, 0, 16, 0, 0, 0, 0, 16,
		16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 0, 0, 0, 16,
		0, 6, 6, 4, 6, 4, 0, 6, 6, 0, 4, 6, 4, 6, 6, 0,
		0, 8, 4, 4, 4, 0, 0, 4, 8, 8, 0, 8, 4, 8, 4, 0,
		16, 6, 6, 4, 6, 0, 4, 2, 6, 4, 0, 2, 4, 2, 2, 0,
		0, 2, 6, 4, 6, 8, 8, 6, 2, 0, 8, 2, 4, 2, 6, 0,
		0, 12, 12, 8, 12, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0,
		0, 4, 8, 0, 8, 4, 8, 8, 4, 0, 4, 4, 0, 4, 8, 0,
		0, 2, 2, 4, 2, 0, 4, 6, 2, 4, 0, 6, 4, 6, 6, 16,
		0, 2, 6, 4, 6, 8, 8, 6, 2, 0, 8, 2, 4, 2, 6, 0,
		0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 16,
		0, 6, 2, 8, 2, 4, 0, 2, 6, 8, 4, 6, 8, 6, 2, 0,
		0, 4, 4, 0, 4, 8, 8, 4, 4, 8, 8, 4, 0, 4, 4, 0,
		16, 4, 4, 0, 4, 0, 0, 4, 4, 0, 0, 4, 0, 4, 4, 16,
		0, 4, 4, 4, 4, 0, 8, 4, 4, 8, 0, 4, 4, 4, 4, 8,
		4, 2, 6, 4, 6, 8, 0, 6, 2, 0, 8, 2, 4, 2, 6, 4,
		0, 2, 2, 8, 2, 12, 4, 2, 2, 4, 12, 2, 8, 2, 2, 0,
		8, 4, 0, 8, 0, 0, 0, 0, 4, 16, 0, 4, 8, 4, 0, 8
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 4, 0, 10, 8, 6, 0, 4, 2, 2, 12, 10, 2, 4,
		0, 0, 0, 4, 0, 10, 6, 4, 0, 6, 4, 2, 4, 8, 10, 6,
		8, 2, 4, 6, 4, 4, 2, 2, 6, 8, 6, 4, 4, 0, 2, 2,
		0, 0, 0, 8, 0, 4, 10, 6, 0, 6, 6, 4, 8, 6, 0, 6,
		12, 2, 0, 4, 0, 4, 8, 2, 4, 0, 16, 2, 0, 2, 0, 8,
		0, 8, 4, 6, 4, 6, 2, 2, 4, 4, 6, 0, 6, 0, 2, 10,
		2, 0, 4, 8, 4, 2, 6, 6, 2, 8, 6, 2, 2, 0, 6, 6,
		0, 0, 0, 2, 0, 8, 10, 4, 0, 4, 10, 4, 8, 4, 4, 6,
		8, 6, 0, 4, 0, 6, 6, 2, 2, 10, 2, 8, 6, 2, 0, 2,
		0, 6, 8, 6, 0, 8, 0, 0, 8, 10, 4, 2, 8, 0, 0, 4,
		4, 2, 2, 4, 8, 10, 6, 4, 2, 6, 2, 2, 6, 2, 2, 2,
		0, 0, 0, 10, 0, 2, 10, 2, 0, 6, 10, 6, 6, 6, 2, 4,
		10, 4, 2, 2, 0, 6, 16, 0, 0, 2, 10, 2, 2, 4, 0, 4,
		0, 6, 4, 8, 4, 6, 10, 2, 4, 4, 4, 2, 4, 0, 2, 4,
		4, 4, 0, 8, 0, 2, 0, 2, 8, 2, 4, 2, 8, 4, 4, 12,
		0, 0, 0, 0, 0, 4, 4, 12, 0, 2, 8, 10, 4, 6, 12, 2,
		6, 6, 10, 10, 4, 0, 2, 6, 2, 4, 0, 6, 2, 4, 2, 0,
		0, 2, 4, 2, 10, 4, 0, 10, 8, 6, 0, 6, 0, 6, 6, 0,
		0, 0, 6, 2, 8, 0, 0, 4, 4, 6, 2, 8, 2, 8, 10, 4,
		0, 12, 2, 6, 4, 0, 4, 4, 8, 4, 4, 4, 6, 2, 4, 0,
		4, 8, 0, 2, 8, 0, 2, 4, 2, 2, 4, 2, 4, 8, 8, 6,
		0, 6, 10, 2, 14, 0, 2, 2, 4, 4, 0, 6, 0, 4, 6, 4,
		0, 6, 8, 4, 8, 4, 0, 2, 8, 4, 0, 2, 2, 8, 6, 2,
		0, 10, 8, 0, 6, 4, 0, 4, 4, 4, 6, 4, 4, 4, 0, 6,
		0, 4, 6, 2, 4, 4, 2, 6, 4, 2, 2, 4, 12, 2, 10, 0,
		0, 2, 16, 2, 12, 2, 0, 6, 4, 0, 0, 4, 0, 4, 4, 8,
		2, 8, 12, 0, 0, 2, 2, 6, 8, 4, 0, 6, 0, 0, 8, 6,
		0, 10, 2, 6, 6, 6, 6, 4, 8, 2, 0, 4, 4, 4, 2, 0,
		4, 6, 2, 0, 8, 2, 4, 6, 6, 0, 8, 6, 2, 4, 2, 4,
		0, 2, 6, 2, 4, 0, 0, 2, 12, 2, 2, 6, 2, 10, 10, 4,
		0, 6, 8, 4, 8, 8, 0, 6, 6, 2, 0, 6, 0, 6, 2, 2,
		0, 0, 0, 8, 0, 8, 2, 6, 0, 4, 4, 4, 6, 6, 8, 8,
		0, 0, 0, 6, 6, 2, 6, 4, 6, 10, 14, 4, 0, 0, 4, 2,
		14, 4, 0, 10, 0, 2, 12, 2, 2, 2, 10, 2, 0, 0, 2, 2,
		2, 0, 0, 4, 2, 2, 10, 4, 0, 8, 8, 2, 6, 8, 0, 8,
		6, 2, 8, 4, 4, 4, 6, 2, 2, 6, 6, 2, 6, 2, 2, 2,
		6, 0, 0, 8, 2, 8, 2, 6, 6, 4, 2, 2, 4, 2, 6, 6,
		12, 0, 0, 4, 0, 4, 4, 4, 0, 8, 4, 0, 12, 8, 0, 4,
		12, 2, 0, 2, 0, 12, 2, 2, 4, 4, 8, 4, 8, 2, 2, 0,
		2, 8, 4, 6, 2, 4, 6, 0, 6, 6, 4, 0, 2, 2, 2, 10,
		6, 4, 6, 8, 8, 4, 6, 2, 0, 0, 2, 2, 10, 0, 2, 4,
		4, 4, 0, 2, 2, 4, 6, 2, 0, 0, 6, 4, 10, 4, 4, 12,
		4, 6, 2, 6, 0, 0, 12, 2, 0, 4, 12, 2, 6, 4, 0, 4,
		8, 6, 2, 6, 4, 8, 6, 0, 4, 4, 0, 2, 6, 0, 6, 2,
		4, 4, 0, 4, 0, 6, 4, 2, 4, 12, 0, 4, 4, 6, 4, 6,
		6, 0, 2, 4, 0, 6, 6, 4, 2, 10, 6, 10, 6, 2, 0, 0,
		10, 4, 0, 2, 2, 6, 10, 2, 0, 2, 2, 4, 6, 2, 2, 10,
		0, 4, 8, 4, 6, 4, 0, 6, 10, 4, 2, 4, 2, 6, 4, 0,
		0, 6, 6, 4, 10, 2, 0, 0, 4, 4, 0, 0, 4, 6, 12, 6,
		4, 6, 0, 2, 6, 4, 6, 0, 6, 0, 4, 6, 4, 10, 6, 0,
		8, 10, 0, 14, 8, 0, 0, 8, 2, 0, 2, 4, 0, 4, 4, 0,
		0, 4, 4, 2, 14, 4, 0, 8, 6, 8, 2, 2, 0, 4, 6, 0,
		0, 4, 16, 0, 8, 4, 0, 4, 4, 4, 0, 8, 0, 4, 4, 4,
		4, 4, 4, 6, 2, 2, 2, 12, 2, 4, 4, 8, 2, 4, 4, 0,
		4, 2, 2, 2, 4, 2, 0, 8, 2, 2, 2, 12, 6, 2, 8, 6,
		0, 4, 8, 4, 12, 0, 0, 8, 10, 2, 0, 0, 0, 4, 2, 10,
		0, 8, 12, 0, 2, 2, 2, 2, 12, 4, 0, 8, 0, 4, 4, 4,
		0, 14, 4, 0, 4, 6, 0, 0, 6, 2, 10, 8, 0, 0, 4, 6,
		0, 2, 2, 2, 4, 4, 8, 6, 8, 2, 2, 2, 6, 14, 2, 0,
		0, 0, 10, 2, 6, 0, 0, 2, 6, 2, 2, 10, 2, 4, 10, 8,
		0, 6, 12, 2, 4, 8, 0, 8, 8, 2, 2, 0, 2, 2, 4, 4,
		4, 4, 10, 0, 2, 4, 8, 8, 2, 2, 0, 2, 6, 8, 4, 0,
		8, 6, 6, 0, 4, 2, 2, 4, 4, 2, 8, 6, 2, 4, 6, 0,
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6, 0, 2, 6, 2, 0, 4, 2, 4, 6, 16, 14, 2,
		0, 0, 0, 2, 0, 10, 6, 10, 0, 2, 4, 8, 6, 6, 8, 2,
		0, 8, 0, 8, 0, 6, 4, 6, 4, 4, 4, 12, 2, 4, 2, 0,
		0, 0, 0, 8, 0, 0, 8, 0, 0, 6, 8, 10, 2, 4, 10, 8,
		10, 2, 4, 4, 4, 8, 8, 4, 2, 2, 0, 4, 0, 8, 0, 4,
		0, 8, 4, 4, 8, 4, 2, 2, 12, 0, 2, 6, 6, 2, 2, 2,
		6, 6, 4, 0, 2, 10, 2, 2, 2, 2, 6, 6, 8, 0, 6, 2,
		0, 0, 0, 6, 0, 2, 16, 4, 0, 2, 6, 2, 4, 12, 6, 4,
		10, 4, 2, 6, 0, 2, 6, 2, 4, 0, 8, 6, 4, 4, 2, 4,
		0, 14, 4, 4, 0, 2, 2, 2, 10, 4, 4, 4, 6, 4, 2, 2,
		4, 6, 2, 0, 2, 2, 12, 8, 2, 2, 2, 6, 8, 2, 0, 6,
		0, 0, 0, 12, 0, 10, 4, 6, 0, 8, 4, 4, 2, 12, 2, 0,
		12, 0, 2, 10, 6, 4, 4, 2, 4, 2, 6, 0, 2, 6, 0, 4,
		0, 6, 4, 0, 4, 4, 10, 8, 6, 2, 4, 6, 2, 0, 6, 2,
		2, 2, 2, 2, 6, 2, 6, 2, 10, 4, 8, 2, 6, 4, 4, 2,
		0, 0, 0, 8, 0, 8, 0, 12, 0, 4, 2, 6, 8, 4, 6, 6,
		6, 2, 6, 4, 6, 2, 6, 4, 6, 6, 4, 2, 4, 0, 6, 0,
		0, 8, 4, 2, 0, 4, 2, 0, 4, 10, 6, 2, 8, 6, 4, 4,
		6, 6, 12, 0, 12, 2, 0, 6, 6, 2, 0, 4, 0, 2, 4, 2,
		0, 4, 6, 2, 8, 6, 0, 2, 6, 10, 4, 0, 2, 4, 6, 4,
		2, 2, 6, 6, 4, 4, 2, 6, 2, 6, 8, 4, 4, 0, 4, 4,
		0, 4, 14, 6, 8, 4, 2, 6, 2, 0, 2, 0, 4, 2, 0, 10,
		2, 6, 8, 0, 0, 2, 0, 2, 2, 6, 0, 8, 8, 2, 12, 6,
		0, 4, 6, 6, 8, 4, 2, 2, 6, 4, 6, 4, 2, 4, 2, 4,
		2, 6, 0, 2, 4, 4, 4, 6, 4, 8, 6, 4, 2, 2, 6, 4,
		0, 6, 6, 0, 8, 2, 4, 6, 4, 2, 4, 6, 2, 0, 4, 10,
		0, 4, 10, 2, 4, 4, 2, 6, 6, 6, 2, 2, 6, 6, 2, 2,
		0, 0, 8, 2, 12, 2, 6, 2, 8, 6, 6, 2, 4, 0, 4, 2,
		2, 4, 0, 6, 8, 6, 0, 2, 6, 8, 6, 0, 2, 4, 0, 10,
		0, 10, 8, 2, 8, 2, 0, 2, 6, 4, 2, 4, 6, 4, 2, 4,
		0, 6, 6, 8, 6, 4, 2, 4, 4, 2, 2, 0, 2, 4, 2, 12,
		0, 0, 0, 0, 0, 6, 6, 4, 0, 4, 8, 8, 4, 6, 10, 8,
		2, 8, 6, 8, 4, 4, 6, 6, 8, 4, 0, 4, 0, 2, 2, 0,
		16, 2, 4, 6, 2, 4, 2, 0, 6, 4, 8, 2, 0, 2, 2, 4,
		0, 4, 0, 4, 4, 6, 10, 4, 2, 2, 6, 2, 4, 6, 6, 4,
		10, 8, 0, 6, 12, 6, 10, 4, 8, 0, 0, 0, 0, 0, 0, 0,
		0, 2, 4, 2, 0, 4, 4, 0, 4, 0, 10, 10, 4, 10, 6, 4,
		2, 2, 0, 12, 2, 2, 6, 2, 4, 4, 8, 0, 6, 6, 8, 0,
		8, 4, 0, 8, 2, 4, 2, 4, 0, 6, 2, 4, 4, 8, 2, 6,
		6, 8, 4, 6, 0, 4, 2, 2, 4, 8, 2, 6, 4, 2, 2, 4,
		2, 4, 4, 0, 8, 8, 6, 8, 6, 4, 0, 4, 4, 4, 2, 0,
		6, 0, 0, 6, 6, 4, 6, 8, 2, 4, 0, 2, 2, 4, 6, 8,
		12, 0, 4, 0, 0, 4, 2, 2, 2, 6, 10, 6, 10, 2, 4, 0,
		4, 2, 6, 0, 0, 6, 8, 6, 4, 2, 2, 8, 4, 6, 4, 2,
		6, 2, 2, 6, 6, 4, 4, 2, 6, 2, 4, 8, 4, 2, 4, 2,
		4, 6, 2, 4, 2, 4, 4, 2, 4, 2, 4, 6, 4, 10, 4, 2,
		10, 0, 4, 8, 0, 6, 6, 2, 0, 4, 4, 2, 6, 2, 2, 8,
		0, 12, 8, 2, 0, 6, 0, 0, 6, 6, 0, 2, 8, 2, 6, 6,
		2, 6, 10, 4, 2, 2, 2, 4, 6, 0, 2, 6, 0, 2, 4, 12,
		4, 2, 2, 8, 10, 8, 8, 6, 0, 2, 2, 4, 4, 2, 2, 0,
		4, 2, 2, 2, 6, 0, 4, 0, 10, 6, 6, 4, 0, 4, 8, 6,
		0, 4, 4, 2, 6, 4, 0, 4, 6, 2, 6, 4, 2, 8, 0, 12,
		6, 12, 4, 2, 4, 2, 2, 4, 8, 2, 2, 0, 6, 4, 4, 2,
		0, 2, 2, 4, 4, 4, 4, 0, 2, 10, 12, 4, 0, 10, 4, 2,
		10, 2, 2, 6, 14, 2, 2, 6, 2, 0, 4, 6, 2, 0, 4, 2,
		0, 4, 14, 0, 8, 2, 0, 4, 4, 4, 2, 0, 8, 2, 4, 8,
		2, 4, 8, 0, 6, 2, 0, 6, 2, 6, 4, 2, 8, 6, 2, 6,
		8, 4, 0, 4, 6, 2, 0, 4, 6, 8, 6, 0, 6, 0, 4, 6,
		0, 4, 6, 6, 2, 2, 2, 14, 0, 12, 0, 4, 2, 2, 8, 0,
		0, 6, 16, 0, 2, 2, 2, 8, 4, 2, 0, 12, 6, 2, 2, 0,
		0, 6, 2, 2, 2, 6, 8, 2, 4, 2, 6, 2, 6, 2, 4, 10,
		4, 2, 2, 4, 4, 0, 6, 10, 4, 2, 4, 6, 6, 2, 6, 2,
		0, 4, 6, 6, 4, 8, 4, 0, 4, 8, 4, 0, 4, 8, 2, 2
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 2, 0, 4, 4, 14, 0, 12, 4, 6, 2, 6, 6, 4,
		0, 0, 0, 0, 0, 12, 2, 2, 0, 4, 0, 4, 8, 12, 6, 14,
		8, 2, 12, 2, 6, 8, 6, 0, 6, 4, 4, 2, 2, 0, 0, 2,
		0, 0, 0, 8, 0, 4, 4, 8, 0, 8, 8, 12, 2, 6, 2, 2,
		6, 0, 0, 2, 8, 0, 8, 4, 0, 2, 6, 0, 10, 6, 6, 6,
		0, 2, 12, 0, 8, 4, 8, 2, 4, 4, 4, 2, 6, 0, 6, 2,
		4, 6, 4, 12, 0, 4, 2, 0, 0, 14, 2, 6, 4, 0, 0, 6,
		0, 0, 0, 8, 0, 0, 6, 10, 0, 4, 12, 4, 6, 6, 0, 8,
		10, 8, 4, 8, 6, 2, 2, 0, 2, 6, 8, 2, 0, 6, 0, 0,
		0, 10, 6, 2, 12, 2, 4, 0, 4, 4, 6, 4, 4, 0, 0, 6,
		0, 2, 2, 2, 4, 8, 6, 4, 4, 0, 4, 2, 6, 4, 2, 14,
		0, 0, 0, 4, 0, 4, 8, 4, 0, 2, 6, 0, 14, 12, 8, 2,
		6, 6, 2, 4, 2, 6, 4, 6, 6, 4, 8, 8, 0, 2, 0, 0,
		0, 12, 10, 10, 0, 2, 4, 2, 8, 6, 4, 2, 0, 0, 2, 2,
		2, 0, 0, 0, 6, 8, 8, 0, 6, 2, 4, 6, 8, 0, 6, 8,
		0, 0, 0, 4, 0, 2, 8, 6, 0, 6, 4, 10, 8, 4, 8, 4,
		6, 10, 10, 4, 4, 2, 0, 4, 4, 0, 2, 8, 4, 2, 2, 2,
		0, 0, 8, 8, 2, 8, 2, 8, 6, 4, 2, 8, 0, 0, 8, 0,
		4, 4, 2, 2, 8, 6, 0, 2, 2, 2, 0, 4, 6, 8, 14, 0,
		0, 8, 6, 2, 8, 8, 2, 6, 4, 2, 0, 2, 8, 6, 0, 2,
		4, 4, 8, 2, 4, 0, 4, 10, 8, 2, 4, 4, 4, 2, 0, 4,
		0, 6, 10, 2, 2, 2, 2, 4, 10, 8, 2, 2, 0, 4, 10, 0,
		8, 2, 4, 2, 6, 4, 0, 6, 4, 4, 2, 2, 0, 4, 8, 8,
		0, 16, 2, 2, 6, 0, 6, 0, 6, 2, 8, 0, 6, 0, 2, 8,
		0, 8, 0, 2, 4, 4, 10, 4, 8, 0, 6, 4, 2, 6, 2, 4,
		0, 2, 4, 8, 12, 4, 0, 6, 4, 4, 0, 2, 0, 6, 4, 8,
		0, 6, 2, 6, 4, 2, 4, 4, 6, 4, 8, 4, 2, 0, 10, 2,
		0, 8, 4, 4, 2, 6, 6, 6, 6, 4, 6, 8, 0, 2, 0, 2,
		4, 4, 4, 0, 0, 2, 4, 2, 4, 2, 2, 4, 10, 10, 8, 4,
		0, 0, 2, 2, 12, 6, 2, 0, 12, 2, 2, 4, 2, 6, 8, 4,
		2, 2, 10, 14, 2, 4, 2, 4, 4, 6, 0, 2, 4, 8, 0, 0,
		0, 0, 0, 14, 0, 8, 4, 2, 0, 4, 2, 8, 2, 6, 0, 14,
		4, 2, 6, 2, 12, 2, 4, 0, 6, 4, 10, 2, 4, 2, 2, 2,
		10, 6, 0, 2, 4, 4, 10, 0, 4, 0, 12, 2, 8, 0, 0, 2,
		0, 6, 2, 2, 2, 4, 6, 10, 0, 4, 8, 2, 2, 6, 0, 10,
		4, 2, 0, 6, 8, 2, 6, 0, 8, 2, 2, 0, 8, 2, 12, 2,
		2, 0, 2, 16, 2, 4, 6, 4, 6, 8, 2, 4, 0, 6, 0, 2,
		6, 10, 0, 10, 0, 6, 4, 4, 2, 2, 4, 6, 2, 4, 2, 2,
		4, 0, 2, 0, 2, 2, 14, 0, 4, 6, 6, 2, 12, 2, 4, 4,
		14, 4, 6, 4, 4, 6, 2, 0, 6, 6, 2, 2, 4, 0, 2, 2,
		2, 2, 0, 2, 0, 8, 4, 2, 4, 6, 4, 4, 6, 4, 12, 4,
		2, 4, 0, 0, 0, 2, 8, 12, 0, 8, 2, 4, 8, 4, 4, 6,
		16, 6, 2, 4, 6, 10, 2, 2, 2, 2, 2, 2, 4, 2, 2, 0,
		2, 6, 6, 8, 2, 2, 0, 6, 0, 8, 4, 2, 2, 6, 8, 2,
		6, 2, 4, 2, 8, 8, 2, 8, 2, 4, 4, 0, 2, 0, 8, 4,
		2, 4, 8, 0, 2, 2, 2, 4, 0, 2, 8, 4, 14, 6, 0, 6,
		2, 2, 2, 8, 0, 2, 2, 6, 4, 6, 8, 8, 6, 2, 0, 6,
		0, 6, 8, 2, 8, 4, 4, 0, 10, 4, 4, 6, 0, 0, 2, 6,
		0, 8, 4, 0, 6, 2, 2, 6, 6, 0, 0, 2, 6, 4, 8, 10,
		2, 4, 0, 0, 6, 4, 10, 6, 6, 4, 6, 2, 4, 6, 2, 2,
		0, 16, 6, 8, 2, 0, 2, 2, 4, 2, 8, 4, 0, 4, 6, 0,
		0, 4, 14, 8, 2, 2, 2, 4, 16, 2, 2, 2, 0, 2, 0, 4,
		0, 6, 0, 0, 10, 8, 2, 2, 6, 0, 0, 8, 6, 4, 4, 8,
		2, 0, 2, 2, 4, 6, 4, 4, 2, 2, 4, 2, 4, 16, 10, 0,
		6, 6, 6, 8, 4, 2, 4, 4, 4, 0, 6, 8, 2, 4, 0, 0,
		0, 2, 2, 2, 8, 8, 0, 2, 2, 2, 0, 6, 6, 4, 10, 10,
		4, 4, 16, 8, 0, 6, 4, 2, 4, 4, 2, 6, 0, 2, 2, 0,
		16, 6, 4, 0, 2, 0, 2, 6, 0, 4, 8, 10, 0, 0, 4, 2,
		2, 0, 0, 2, 0, 4, 4, 4, 2, 6, 2, 6, 6, 12, 12, 2,
		0, 0, 8, 0, 12, 8, 2, 6, 6, 4, 0, 2, 2, 4, 6, 4,
		2, 4, 12, 2, 2, 2, 0, 4, 6, 10, 2, 6, 4, 2, 0, 6,
		4, 6, 6, 6, 2, 0, 4, 8, 2, 10, 4, 6, 0, 4, 2, 0,
		14, 0, 0, 0, 8, 0, 6, 8, 4, 2, 0, 0, 4, 8, 4, 6
	},
	{
		64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 6, 0, 16, 10, 0, 0, 0, 6, 0, 14, 6, 2, 4,
		0, 0, 0, 8, 0, 10, 4, 2, 0, 10, 2, 4, 8, 8, 6, 2,
		6, 0, 2, 8, 2, 6, 4, 0, 6, 6, 6, 2, 2, 0, 8, 6,
		0, 0, 0, 2, 0, 4, 6, 12, 0, 6, 8, 4, 10, 4, 8, 0,
		4, 10, 6, 0, 0, 2, 6, 0, 4, 10, 4, 6, 8, 2, 0, 2,
		0, 0, 10, 4, 6, 4, 4, 8, 2, 6, 4, 2, 4, 2, 2, 6,
		6, 2, 8, 2, 8, 10, 6, 6, 4, 2, 0, 4, 0, 0, 0, 6,
		0, 0, 0, 4, 0, 6, 4, 2, 0, 8, 6, 10, 8, 2, 2, 12,
		8, 4, 0, 6, 0, 4, 4, 6, 2, 4, 6, 2, 12, 2, 0, 4,
		0, 0, 16, 4, 6, 6, 4, 0, 4, 6, 4, 2, 2, 0, 0, 10,
		2, 8, 0, 6, 2, 6, 0, 4, 4, 10, 0, 2, 10, 2, 6, 2,
		0, 0, 0, 2, 0, 10, 10, 6, 0, 6, 6, 6, 2, 6, 10, 0,
		6, 0, 4, 10, 2, 0, 8, 6, 2, 2, 6, 10, 2, 2, 2, 2,
		0, 0, 6, 8, 4, 8, 0, 2, 10, 6, 2, 4, 6, 2, 4, 2,
		8, 0, 4, 2, 2, 4, 2, 2, 2, 6, 4, 6, 0, 2, 14, 6,
		0, 0, 0, 4, 0, 0, 8, 12, 0, 0, 8, 8, 2, 10, 6, 6,
		0, 6, 4, 6, 2, 2, 6, 6, 4, 6, 4, 6, 0, 4, 4, 4,
		0, 4, 0, 8, 6, 2, 8, 4, 2, 4, 4, 6, 2, 4, 10, 0,
		4, 2, 2, 6, 8, 6, 2, 2, 14, 2, 2, 4, 2, 2, 2, 4,
		0, 16, 4, 2, 6, 0, 2, 6, 4, 0, 4, 6, 4, 6, 4, 0,
		0, 10, 6, 0, 6, 0, 2, 8, 2, 2, 0, 8, 2, 6, 6, 6,
		0, 12, 6, 4, 6, 0, 0, 0, 8, 6, 6, 2, 2, 6, 4, 2,
		0, 6, 8, 0, 6, 2, 4, 6, 6, 0, 2, 6, 4, 4, 2, 8,
		0, 12, 2, 2, 8, 0, 8, 0, 10, 4, 4, 2, 4, 2, 0, 6,
		6, 4, 8, 0, 8, 0, 4, 2, 0, 0, 12, 2, 4, 6, 2, 6,
		0, 4, 6, 2, 8, 8, 0, 4, 8, 0, 0, 0, 6, 2, 0, 16,
		2, 4, 8, 10, 2, 4, 2, 8, 2, 4, 8, 2, 0, 2, 4, 2,
		0, 12, 6, 4, 6, 4, 2, 2, 6, 0, 4, 4, 2, 10, 2, 0,
		8, 6, 0, 0, 10, 0, 0, 8, 10, 4, 2, 2, 2, 8, 4, 0,
		0, 4, 8, 6, 8, 2, 4, 4, 10, 2, 2, 4, 2, 0, 6, 2,
		4, 2, 4, 2, 6, 2, 4, 0, 2, 6, 2, 2, 2, 16, 8, 2,
		0, 0, 0, 16, 0, 4, 0, 0, 0, 14, 6, 4, 2, 0, 4, 14,
		0, 0, 2, 10, 2, 8, 10, 0, 0, 6, 6, 0, 10, 2, 2, 6,
		8, 0, 6, 0, 6, 4, 10, 2, 0, 6, 8, 0, 4, 4, 2, 4,
		4, 8, 0, 6, 0, 4, 8, 6, 2, 2, 10, 4, 8, 0, 0, 2,
		4, 0, 4, 8, 4, 6, 2, 4, 8, 6, 2, 0, 0, 4, 4, 8,
		0, 4, 6, 8, 2, 8, 8, 0, 4, 2, 4, 4, 2, 2, 6, 4,
		2, 6, 0, 6, 4, 4, 4, 6, 6, 0, 4, 4, 10, 4, 2, 2,
		6, 6, 0, 0, 2, 2, 6, 2, 4, 4, 6, 10, 2, 6, 2, 6,
		10, 2, 6, 2, 4, 12, 12, 0, 2, 2, 4, 0, 0, 0, 2, 6,
		4, 0, 0, 14, 2, 10, 4, 2, 8, 6, 4, 0, 4, 2, 2, 2,
		8, 8, 0, 2, 0, 2, 4, 0, 2, 6, 8, 14, 2, 8, 0, 0,
		2, 2, 0, 0, 4, 2, 10, 4, 6, 2, 4, 0, 6, 4, 8, 10,
		2, 6, 6, 2, 4, 6, 2, 0, 2, 6, 4, 0, 6, 4, 10, 4,
		8, 0, 4, 4, 6, 2, 0, 0, 6, 8, 2, 4, 6, 4, 4, 6,
		6, 2, 2, 4, 2, 2, 6, 12, 4, 0, 4, 2, 8, 8, 0, 2,
		8, 12, 4, 6, 6, 4, 2, 2, 2, 2, 4, 2, 2, 4, 0, 4,
		0, 4, 6, 2, 10, 2, 2, 2, 4, 8, 0, 0, 8, 4, 6, 6,
		4, 6, 8, 0, 4, 6, 0, 4, 4, 6, 10, 2, 2, 4, 4, 0,
		6, 6, 6, 2, 4, 6, 0, 2, 0, 6, 8, 2, 2, 6, 6, 2,
		6, 6, 4, 2, 4, 0, 0, 10, 2, 2, 0, 6, 8, 4, 0, 10,
		0, 2, 12, 4, 10, 4, 0, 4, 12, 0, 2, 4, 2, 2, 2, 4,
		6, 4, 4, 0, 10, 0, 0, 4, 10, 0, 0, 4, 2, 8, 8, 4,
		4, 6, 2, 2, 2, 2, 6, 8, 6, 4, 2, 6, 0, 4, 10, 0,
		2, 2, 8, 2, 4, 4, 4, 2, 6, 2, 0, 10, 6, 10, 2, 0,
		0, 4, 8, 4, 2, 6, 6, 2, 4, 2, 2, 4, 6, 4, 4, 6,
		4, 4, 4, 8, 0, 6, 0, 6, 4, 8, 2, 2, 2, 4, 8, 2,
		8, 8, 0, 4, 2, 0, 10, 4, 0, 0, 0, 4, 8, 6, 8, 2,
		8, 2, 6, 4, 4, 4, 4, 0, 6, 4, 4, 6, 4, 4, 4, 0,
		0, 6, 6, 6, 6, 0, 0, 8, 8, 2, 4, 8, 4, 2, 4, 0,
		2, 2, 8, 0, 10, 0, 2, 12, 0, 4, 0, 8, 0, 2, 6, 8,
		6, 4, 0, 0, 4, 4, 0, 10, 6, 2, 6, 12, 2, 4, 0, 4,
		0, 6, 6, 0, 4, 4, 6, 10, 0, 6, 8, 2, 0, 4, 8, 0
	}
};
const ubyte dL[24][9] = {
	"\x00\x40\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x40\x00\x00\x00\x00\x00",
	"\x00\x40\x40\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x40\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x40\x00",
	"\x00\x00\x00\x00\x00\x40\x40\x00",
	"\x00\x10\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x10\x00\x00\x00\x00\x00",
	"\x00\x10\x10\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x10\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x10\x00",
	"\x00\x00\x00\x00\x00\x10\x10\x00",
	"\x00\x04\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x04\x00\x00\x00\x00\x00",
	"\x00\x04\x04\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x04\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x04\x00",
	"\x00\x00\x00\x00\x00\x04\x04\x00",
	"\x00\x01\x00\x00\x00\x00\x00\x00",
	"\x00\x00\x01\x00\x00\x00\x00\x00",
	"\x00\x01\x01\x00\x00\x00\x00\x00",
	"\x00\x00\x00\x00\x00\x01\x00\x00",
	"\x00\x00\x00\x00\x00\x00\x01\x00",
	"\x00\x00\x00\x00\x00\x01\x01\x00"
};

#include "containers/bitarray.h"

struct DesParams
{
	/// Number of rounds
	uint32 numRounds;

	/// Initial and final permutations @{
	const uint32 * ip;
	const uint32 * fp;
	/// @}

	/// Expansion table
	const uint32 * xpn;

	/// Permutation table
	const uint32 * perm;

	/// Sbox tables @{
	const uint32 * subs[8];
	const uint32 * difs[8];
	/// @}
};

struct RoundInstance
{
	/// Right bitarray
	BitArray dr;

	/// Left bitarray
	BitArray dl;

	/// Sbox output
	BitArray dy;
};

struct RoundNode
{
	/// Instance of this round
	RoundInstance instance;

	/// Round differential probability
	float32 p;

	/// Current round
	uint32 round;

	/// Des parameters
	DesParams * params;

public:
	/**
	 * Init with plaintext
	 * 
	 * @param [in] ptx plaintext bitarray
	 */
	void init(const BitArray & ptx)
	{
		// Set differentials
		instance.dr = BitArray(32);
		instance.dl = BitArray(32);

		ptx.permute(instance.dr, params->ip);
		ptx.permute(instance.dl, params->ip + 32);

		// Set probability and round
		p = 1.f, round = 1;
	}

	//////////////////////////////////////////////////
	// Monte carlo interface
	//////////////////////////////////////////////////
	
	/// Returns round score (logarithmic differential probability)
	FORCE_INLINE float32 getScore()
	{
		return log2(p);
	}

protected:
	/**
	 * Expand node internal
	 * 
	 * @param [out] out out list of expanded nodes
	 * @param [in] dx,dy input and output of sbox
	 * @param [in] params des parameters
	 * @param [in] s sbox index
	 */
	void expand_internal(List<RoundNode> & out, const BitArray & dx, const BitArray & dy, float32 p0 = 1.f, uint32 s = 0) const
	{
		if (s < 8)
		{
			uint32 x = dx(s * 6, (s + 1) * 6);
			if (x != 0)
				// For each possible output
				for (ubyte y = 0; y < 16; ++y)
				{
					const uint32 d = params->difs[s][(x << 4) + y];

					if (d > 0)
					{
						const float32 p = d / 64.f;
						const ubyte _y = y << 4;
						expand_internal(out, dx, dy.merge(BitArray(&_y, 4)), p0 * p, s + 1);
					}
				}
			else
				expand_internal(out, dx, dy.merge(BitArray((const ubyte[]){0x0}, 4)), p0, s + 1);
		}
		else
		{
			// Compute next round node
			BitArray u(32);
			RoundNode nextRound{
				instance : {
					dr : dy.permute(u, params->perm) ^= instance.dl,
					dl : instance.dr,
					dy : dy
				},
				p : p0,
				round : round + 1,
				params : params
			};

			out.push(move(nextRound));
		}
	}

public:
	/// Expand this node
	List<RoundNode> expand()
	{
		// Out list of expanded rounds
		List<RoundNode> out;
		
		// Don't expand last round
		if (round < params->numRounds - 2)
		{
			// Compute sbox input
			BitArray dx(48), dy(0);

			// Recursive expansion
			expand_internal(out, instance.dr.permute(dx, params->xpn), dy);
		}

		printf("expanded nodes: %u\n", out.getCount());
		return out;
	}
};

class Path
{
protected:
	/// Partial differential path
	List<RoundInstance> rounds;

	/// Cost
	float32 g;

	/// Heuristic value
	float32 h;

	/// Des parameters
	const DesParams * params;

public:
	/// Default constructor
	FORCE_INLINE Path(const DesParams * _params)
		: rounds{}
		, g{0.f}
		, h{0.f}
		, params{_params} {}
	
	/// Copy constructor
	Path(const Path & other) = default;

	/// Move constructor
	Path(Path && other) = default;

	/// Copy assignment
	Path & operator=(const Path & other) = default;

	/// Move assignment
	Path & operator=(Path && other) = default;

	/// Get total path cost
	FORCE_INLINE float32 getTotalCost() const
	{
		return g + h;
	}

	/// Returns true if path is a complete path
	FORCE_INLINE bool isComplete() const
	{
		return rounds.getCount() >= params->numRounds - 2;
	}

	/// Init path with des input (before initial permutation)
	void init(const BitArray & ptx)
	{
		// Create first round from ptx
		RoundInstance & inputRound = rounds.push(RoundInstance{
			dr : BitArray(32),
			dl : BitArray(32)
		});

		ptx.permute(inputRound.dr, params->ip);
		ptx.permute(inputRound.dl, params->ip + 32);

		// Init cost
		g = 0.f;
		computeH();
	}

	/// Compute node heuristics
	void computeH()
	{
		// Out probability
		float32 p = 1.f;

		BitArray dx(48);
		rounds.last()->dr.permute(dx, params->xpn);

		const uint32 numLeftRounds = params->numRounds - rounds.getCount() - 2;
		if (numLeftRounds)
		{
			// For each sbox
			for (uint32 i = 0; i < 8; ++i)
			{
				const uint32 * row = params->difs[i] + (dx(i * 6, (i + 1) * 6) << 4);

				// Find max probability
				uint32 max = row[0]; for (uint32 j = 1; j < 16; ++j) max = Math::max(max, row[j]);

				// Update best probability
				p *= max / 64.f;
			}

			// Approx next rounds
			for (uint32 i = 0; i < numLeftRounds - 1; ++i)
				p *= 0.25f;
		}

		h = -log2(p);
	}

protected:
	/**
	 * Expand node internal
	 * 
	 * @param [out] out out list of expanded nodes
	 * @param [in] dx,dy input and output of sbox
	 * @param [in] params des parameters
	 * @param [in] s sbox index
	 */
	void expand_internal(List<Path> & out, const BitArray & dx, const BitArray & dy, float32 p0 = 1.f, uint32 s = 0) const
	{
		if (s < 8)
		{
			uint32 x = dx(s * 6, (s + 1) * 6);
			if (x != 0)
				// For each possible output
				for (ubyte y = 0; y < 16; ++y)
				{
					const uint32 d = params->difs[s][(x << 4) + y];

					if (d > 0)
					{
						const float32 p = d / 64.f;
						const ubyte _y = y << 4;
						expand_internal(out, dx, dy.merge(BitArray(&_y, 4)), p0 * p, s + 1);
					}
				}
			else
				expand_internal(out, dx, dy.merge(BitArray((const ubyte[]){0x0}, 4)), p0, s + 1);
		}
		else
		{
			// Copy path
			Path path(*this);

			// Update current round
			path.rounds.last()->dy = dy;

			// Compute next round
			BitArray u(32);
			path.rounds.push(RoundInstance{
				dr : dy.permute(u, params->perm) ^= path.rounds.last()->dl,
				dl : path.rounds.last()->dr
			});

			// Update path probability
			path.g += -log2(p0);
			path.computeH();

			// Move into output list
			out.push(move(path));
		}
	}

public:
	/// Expand node
	FORCE_INLINE List<Path> expand()
	{
		// Out list of expanded node
		List<Path> out;

		// Compute sbox input
		const RoundInstance & lastRound = *rounds.last();		
		BitArray dx(48), dy(0);

		// Recursive expansion
		expand_internal(out, lastRound.dr.permute(dx, params->xpn), dy);

		return out;
	}

protected:
	/**
	 * Internal sample code
	 * 
	 * @param [in] dx sbox differential input
	 * @param [in] p0 out differential probability
	 * @param [in] s simulated sbox index
	 */
	FORCE_INLINE float32 sample_internal(const BitArray & dx, float32 p0 = 1.f, uint32 s = 0)
	{
		if (s < 8)
		{
			uint32 x = dx(s * 6, (s + 1) * 6);
			if (x != 0)
			{
				uint32 y = 0, d = 0;
				while (d == 0) // ! Assuming there's no null row
				{
					y = rand() & 0xf;
					d = params->difs[s][(x << 4) + y];
				}

				uint32 _y = y << 4;
				return sample_internal(dx, p0 * (d / 64.f), s + 1);
			}
			else
				return sample_internal(dx, p0, s + 1);
		}

		return p0;
	}

public:
	/**
	 * Simulate a random walk starting from this partial path
	 * 
	 * @return simualated path cost
	 */
	float32 sample()
	{
		// Compute sbox input
		BitArray dx(48);

		float32 p = sample_internal(rounds.last()->dr.permute(dx, params->xpn));
		return -log2(p);
	}
};

template<typename T>
struct SearchNode
{
public:
	/// Node data
	T data;

	/// Node average cost
	float32 cost;

	/// Num visits
	uint32 visitCount;

public:
	/// Default constructor
	template<typename _T = T>
	FORCE_INLINE SearchNode(_T && _data)
		: data{forward<_T>(_data)}
		, cost{FLT_MAX}
		, visitCount{0} {}

	/// Copy constructor
	SearchNode(const SearchNode & other) = default;

	/// Move constructor
	SearchNode(SearchNode && other) = default;
	
	/// Copy assignment
	SearchNode & operator=(const SearchNode & other) = default;

	/// Move assignment
	SearchNode & operator=(SearchNode && other) = default;
	
	/**
	 * Compute exploration value
	 * 
	 * @param [in] pVisits parent node visit count
	 * @return exploration value
	 */
	FORCE_INLINE float32 getValue(uint32 pVisits) const
	{
		const float32 k = 0.1f;
		return visitCount ? 1.f / (visitCount * cost) + 0.1f * sqrt(log(pVisits) / visitCount) : FLT_MAX;
	}

	// Tick this node, updates its cost and visit count
	void update()
	{
		cost *= visitCount;
		cost += data.sample();
		cost /= ++visitCount;
	}
};

int32 main()
{
	Memory::createGMalloc();

	DesParams params{
		numRounds : 6,
		ip : ip,
		fp : fp,
		xpn : xpn,
		perm : perm,
		subs : {
			subs[0], subs[1], subs[2], subs[3],
			subs[4], subs[5], subs[6], subs[7]
		},
		difs : {
			diffs[0], diffs[1], diffs[2], diffs[3],
			diffs[4], diffs[5], diffs[6], diffs[7],
		}
	};

	//////////////////////////////////////////////////
	// Init
	//////////////////////////////////////////////////

	List<SearchNode<Path>> nodes;
	
	for (uint32 i = 0; i < sizeof(dL) / sizeof(*dL); ++i)
	{
		Path path(&params);
		path.init(BitArray(dL[i], 64));
		
		nodes.push(SearchNode<Path>(move(path)));
	}

	for (uint32 r = 1; r < params.numRounds - 2; ++r)
	{
		float32 max = -FLT_MAX;
		SearchNode<Path> * node = nullptr;

		for (uint32 i = 0; i < 1u << 16; ++i)
		{
			// Find node to sample
			max = -FLT_MAX;
			for (auto & n : nodes)
			{
				const float32 v = n.getValue(i);
				if (v > max) max = v, node = &n;
			}

			// Sample node and repeat
			node->update();
		}

		printf("best node: %p {v = %.3f, cost = %.3f}\n", node, max, node->data.getTotalCost());

		// Expand best node
		List<Path> paths = node->data.expand();

		// Next round nodes
		nodes.empty();
		for (auto & path : paths)
			nodes.insert(SearchNode<Path>(move(path)));

		getc(stdin);
	}

	return 0;
}